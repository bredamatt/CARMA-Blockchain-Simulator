// This code is autogenerated from the .carma file in this directory.

package ms;

import org.apache.commons.math3.random.RandomGenerator;
import org.cmg.ml.sam.sim.*;
import eu.quanticol.carma.simulator.*;
import eu.quanticol.carma.simulator.space.Location;
import eu.quanticol.carma.simulator.space.Node;
import eu.quanticol.carma.simulator.space.SpaceModel;
import eu.quanticol.carma.simulator.space.Tuple;
import eu.quanticol.carma.simulator.space.Edge;
import java.util.LinkedList;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.List;
import java.util.TreeSet;
import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import org.cmg.ml.sam.sim.sampling.*;


public class Model extends CarmaModel {

	public Model() {
		generateConstRoutePKBehaviour( );
		generateConstRouteSHBehaviour( );
		generateBurstRoute2KBehaviour( );
		generateBurstRoute2HBehaviour( );
		generateTRXBehaviour( );
		generateNodeBehaviour( );
		generateBlockRouterBehaviour( );
		generateBlockProducerBehaviour( );
		generateBlockBehaviour( );
		generateBlockchainBehaviour( );
		generateMemoryPoolBehaviour( );
	}




	public final int __CONST__nodenumber = 4;
	public final int __CONST__nodenumber2 = 8;
	public final int __CONST__P2PK = 250;
	public final int __CONST__P2SH = 750;
	public final double __CONST__NODE_RATE = 1.0;
	public final double __CONST__NODE_RATE2 = 0.5;
	public final double __CONST__PRODUCER_RATE = 1.0;
	public final double __CONST__PRODUCER_RATE2 = 0.05;
	public final int __CONST__adjusted = 0;
	public final double __CONST__t_start = 0.0;
	public final double __CONST__t_end = 100.0;
	public final double __CONST__t_bstart = 5.0;
	public final int __CONST__block_size = 15000;

	public Node __FUN__nextNode (
		Node __VARIABLE__current
	) {
		{
			//
			return RandomGeneratorRegistry.select(
				map(
					__VARIABLE__current.getOutEdges(  )
					 ,
					__LAMBDA__var -> __LAMBDA__var
					.getTarget()
				)
				 ,
				__LAMBDA__var -> 1.0
			)
			;
			//
		}
	}
	public Node __FUN__BlockReceiver (
		Node __VARIABLE__current
	) {
		{
			//
			return RandomGeneratorRegistry.select(
				map(
					__VARIABLE__current.getOutEdges(  )
					 ,
					__LAMBDA__var -> __LAMBDA__var
					.getTarget()
				)
				 ,
				__LAMBDA__var -> 1.0
			)
			;
			//
		}
	}
	public Double __FUN__traversalRate (
		Node __VARIABLE__current,Node __VARIABLE__next
	) {
		{
			//
			HashSet<Double> __VARIABLE__rates =map(
				__VARIABLE__current.getOutEdges(  __VARIABLE__next  )
				 ,
				__LAMBDA__var -> __LAMBDA__var
				.getValue( "traversal_rate" , Double.class )
			)
			;
			//
			//
			if (carmaEquals( computeSize( __VARIABLE__rates ) , 0 )) {
				//
				return 0.0;
				//
			}
			else {
				//
				return RandomGeneratorRegistry.select(
					__VARIABLE__rates ,
					__LAMBDA__var -> 1.0
				)
				;
				//
			}
			//
		}
	}
	public Integer __FUN__clearMP (
		Integer __VARIABLE__poolSize,Integer __VARIABLE__block_size
	) {
		{
			//
			if (( __VARIABLE__poolSize )<( __VARIABLE__block_size )) {
				//
				Integer __VARIABLE__adjusted =( __VARIABLE__block_size )/( 2 );
				//
			}
			//
			//
			return __CONST__adjusted;
			//
		}
	}

	public SpaceModel get_SPACE_Decentralised(   Integer __VARIABLE__nodenumber  ) {
		SpaceModel sm = new SpaceModel();

		sm.addVertex( null , new Tuple( -(10) ) );
		sm.addVertex( null , new Tuple( -(20) ) );
		sm.addVertex( null , new Tuple( -(50) ) );
		for( int __VARIABLE__i = 0 ; __VARIABLE__i < __VARIABLE__nodenumber ; __VARIABLE__i += 1 )
			{
				sm.addVertex( null , new Tuple( __VARIABLE__i ) );
			}
		for( int __VARIABLE__i = 4 ; __VARIABLE__i < __CONST__nodenumber2 ; __VARIABLE__i += 1 )
			{
				sm.addVertex( null , new Tuple( __VARIABLE__i ) );
			}
		for( int __VARIABLE__j = 0 ; __VARIABLE__j < __VARIABLE__nodenumber ; __VARIABLE__j += 1 )
			{
				sm.addVertex( null , new Tuple( -(__VARIABLE__j) ) );
			}
		sm.addVertex( null , new Tuple( -(4) ) );

		for( int __VARIABLE__i = 0 ; __VARIABLE__i < ( __VARIABLE__nodenumber )-( 1 ) ; __VARIABLE__i += 1 )
			{
				{
					Node l1 = sm.getVertex( new Tuple( __VARIABLE__i) );
					Node l2 = sm.getVertex( new Tuple( ( ( __VARIABLE__i )+( 1 ) )%( __VARIABLE__nodenumber )) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__NODE_RATE );
						sm.addEdge( l1 , data , l2);
						sm.addEdge( l2, data , l1 );
					}
				}
			}
		{
			Node l1 = sm.getVertex( new Tuple( 2) );
			Node l2 = sm.getVertex( new Tuple( 0) );
			if ((l1 != null)&&(l2 != null)) {
				HashMap<String,Object> data = new HashMap<>();
				data.put( "traversal_rate" , __CONST__NODE_RATE );
				sm.addEdge( l1 , data , l2);
				sm.addEdge( l2, data , l1 );
			}
		}
		{
			Node l1 = sm.getVertex( new Tuple( 1) );
			Node l2 = sm.getVertex( new Tuple( 3) );
			if ((l1 != null)&&(l2 != null)) {
				HashMap<String,Object> data = new HashMap<>();
				data.put( "traversal_rate" , __CONST__NODE_RATE );
				sm.addEdge( l1 , data , l2);
				sm.addEdge( l2, data , l1 );
			}
		}
		{
			Node l1 = sm.getVertex( new Tuple( 4) );
			Node l2 = sm.getVertex( new Tuple( 5) );
			if ((l1 != null)&&(l2 != null)) {
				HashMap<String,Object> data = new HashMap<>();
				data.put( "traversal_rate" , __CONST__NODE_RATE2 );
				sm.addEdge( l1 , data , l2);
				sm.addEdge( l2, data , l1 );
			}
		}
		{
			Node l1 = sm.getVertex( new Tuple( 4) );
			Node l2 = sm.getVertex( new Tuple( 6) );
			if ((l1 != null)&&(l2 != null)) {
				HashMap<String,Object> data = new HashMap<>();
				data.put( "traversal_rate" , __CONST__NODE_RATE2 );
				sm.addEdge( l1 , data , l2);
				sm.addEdge( l2, data , l1 );
			}
		}
		{
			Node l1 = sm.getVertex( new Tuple( 4) );
			Node l2 = sm.getVertex( new Tuple( 7) );
			if ((l1 != null)&&(l2 != null)) {
				HashMap<String,Object> data = new HashMap<>();
				data.put( "traversal_rate" , __CONST__NODE_RATE2 );
				sm.addEdge( l1 , data , l2);
				sm.addEdge( l2, data , l1 );
			}
		}
		{
			Node l1 = sm.getVertex( new Tuple( 5) );
			Node l2 = sm.getVertex( new Tuple( 6) );
			if ((l1 != null)&&(l2 != null)) {
				HashMap<String,Object> data = new HashMap<>();
				data.put( "traversal_rate" , __CONST__NODE_RATE2 );
				sm.addEdge( l1 , data , l2);
				sm.addEdge( l2, data , l1 );
			}
		}
		{
			Node l1 = sm.getVertex( new Tuple( 5) );
			Node l2 = sm.getVertex( new Tuple( 7) );
			if ((l1 != null)&&(l2 != null)) {
				HashMap<String,Object> data = new HashMap<>();
				data.put( "traversal_rate" , __CONST__NODE_RATE2 );
				sm.addEdge( l1 , data , l2);
				sm.addEdge( l2, data , l1 );
			}
		}
		{
			Node l1 = sm.getVertex( new Tuple( 6) );
			Node l2 = sm.getVertex( new Tuple( 7) );
			if ((l1 != null)&&(l2 != null)) {
				HashMap<String,Object> data = new HashMap<>();
				data.put( "traversal_rate" , __CONST__NODE_RATE2 );
				sm.addEdge( l1 , data , l2);
				sm.addEdge( l2, data , l1 );
			}
		}
		for( int __VARIABLE__i = 1 ; __VARIABLE__i < __VARIABLE__nodenumber ; __VARIABLE__i += 1 )
			{
				{
					Node l1 = sm.getVertex( new Tuple( -(__VARIABLE__i)) );
					Node l2 = sm.getVertex( new Tuple( 0) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__PRODUCER_RATE );
						sm.addEdge( l1 , data , l2);
					}
				}
				{
					Node l1 = sm.getVertex( new Tuple( -(__VARIABLE__i)) );
					Node l2 = sm.getVertex( new Tuple( 1) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__PRODUCER_RATE );
						sm.addEdge( l1 , data , l2);
					}
				}
				{
					Node l1 = sm.getVertex( new Tuple( -(__VARIABLE__i)) );
					Node l2 = sm.getVertex( new Tuple( 2) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__PRODUCER_RATE );
						sm.addEdge( l1 , data , l2);
					}
				}
				{
					Node l1 = sm.getVertex( new Tuple( -(__VARIABLE__i)) );
					Node l2 = sm.getVertex( new Tuple( 3) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__PRODUCER_RATE );
						sm.addEdge( l1 , data , l2);
					}
				}
				{
					Node l1 = sm.getVertex( new Tuple( -(__VARIABLE__i)) );
					Node l2 = sm.getVertex( new Tuple( 4) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__PRODUCER_RATE2 );
						sm.addEdge( l1 , data , l2);
					}
				}
				{
					Node l1 = sm.getVertex( new Tuple( -(__VARIABLE__i)) );
					Node l2 = sm.getVertex( new Tuple( 5) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__PRODUCER_RATE2 );
						sm.addEdge( l1 , data , l2);
					}
				}
				{
					Node l1 = sm.getVertex( new Tuple( -(__VARIABLE__i)) );
					Node l2 = sm.getVertex( new Tuple( 6) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__PRODUCER_RATE2 );
						sm.addEdge( l1 , data , l2);
					}
				}
				{
					Node l1 = sm.getVertex( new Tuple( -(__VARIABLE__i)) );
					Node l2 = sm.getVertex( new Tuple( 7) );
					if ((l1 != null)&&(l2 != null)) {
						HashMap<String,Object> data = new HashMap<>();
						data.put( "traversal_rate" , __CONST__PRODUCER_RATE2 );
						sm.addEdge( l1 , data , l2);
					}
				}
			}

		{
			Node tmpNode = null;
			HashSet<Node> area = new HashSet<Node>();
			tmpNode = sm.getVertex( new Tuple( 0) );
			if (tmpNode != null) {
				area.add( tmpNode );
			}
			tmpNode = sm.getVertex( new Tuple( 1) );
			if (tmpNode != null) {
				area.add( tmpNode );
			}
			tmpNode = sm.getVertex( new Tuple( 2) );
			if (tmpNode != null) {
				area.add( tmpNode );
			}
			tmpNode = sm.getVertex( new Tuple( 3) );
			if (tmpNode != null) {
				area.add( tmpNode );
			}
			sm.setArea( "cluster1" , area );
		}
		{
			Node tmpNode = null;
			HashSet<Node> area = new HashSet<Node>();
			tmpNode = sm.getVertex( new Tuple( 4) );
			if (tmpNode != null) {
				area.add( tmpNode );
			}
			tmpNode = sm.getVertex( new Tuple( 5) );
			if (tmpNode != null) {
				area.add( tmpNode );
			}
			tmpNode = sm.getVertex( new Tuple( 6) );
			if (tmpNode != null) {
				area.add( tmpNode );
			}
			tmpNode = sm.getVertex( new Tuple( 7) );
			if (tmpNode != null) {
				area.add( tmpNode );
			}
			sm.setArea( "cluster2" , area );
		}

		return sm;
	}




	/* START COMPONENT: ConstRoutePK         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_ConstRoutePK = new CarmaProcessAutomaton("ConstRoutePK");

	public final CarmaProcessAutomaton.State __STATE___ConstRoutePK_C_arr = _COMP_ConstRoutePK.newState("C_arr");

	private void generateConstRoutePKBehaviour( ) {


		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__t_start = (Double) store.get( "t_start" );
					Double __ATTR__t_end = (Double) store.get( "t_end" );
					return ( ( __ATTR__t_start )<=( now ) )&&( ( now )<=( __ATTR__t_end ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__arrive_CK , __ACT__arrive_CK , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__P2PK = (Integer) store.get( "P2PK" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__loc );
						toReturn.add( __ATTR__P2PK );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {
							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_ConstRoutePK.addTransition(
					__STATE___ConstRoutePK_C_arr ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___ConstRoutePK_C_arr );
			}
		}

	}

	public CarmaComponent createComponentConstRoutePK(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "ConstRoutePK" );
		Integer __ATTR__P2PK;
		Integer __MY__P2PK;
		__ATTR__P2PK =  __CONST__P2PK;
		__MY__P2PK = __ATTR__P2PK;
		c.set( "P2PK" ,  __ATTR__P2PK );
		Double __ATTR__t_start;
		Double __MY__t_start;
		__ATTR__t_start =  __CONST__t_start;
		__MY__t_start = __ATTR__t_start;
		c.set( "t_start" ,  __ATTR__t_start );
		Double __ATTR__t_end;
		Double __MY__t_end;
		__ATTR__t_end =  __CONST__t_end;
		__MY__t_end = __ATTR__t_end;
		c.set( "t_end" ,  __ATTR__t_end );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_ConstRoutePK , __STATE___ConstRoutePK_C_arr ));
		return c;
	}

	/* END COMPONENT: ConstRoutePK */


	/* START COMPONENT: ConstRouteSH         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_ConstRouteSH = new CarmaProcessAutomaton("ConstRouteSH");

	public final CarmaProcessAutomaton.State __STATE___ConstRouteSH_C_arr = _COMP_ConstRouteSH.newState("C_arr");

	private void generateConstRouteSHBehaviour( ) {


		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__t_start = (Double) store.get( "t_start" );
					Double __ATTR__t_end = (Double) store.get( "t_end" );
					return ( ( __ATTR__t_start )<=( now ) )&&( ( now )<=( __ATTR__t_end ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__arrive_CH , __ACT__arrive_CH , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__P2SH = (Integer) store.get( "P2SH" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__loc );
						toReturn.add( __ATTR__P2SH );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {
							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_ConstRouteSH.addTransition(
					__STATE___ConstRouteSH_C_arr ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___ConstRouteSH_C_arr );
			}
		}

	}

	public CarmaComponent createComponentConstRouteSH(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "ConstRouteSH" );
		Integer __ATTR__P2SH;
		Integer __MY__P2SH;
		__ATTR__P2SH =  __CONST__P2SH;
		__MY__P2SH = __ATTR__P2SH;
		c.set( "P2SH" ,  __ATTR__P2SH );
		Double __ATTR__t_start;
		Double __MY__t_start;
		__ATTR__t_start =  __CONST__t_start;
		__MY__t_start = __ATTR__t_start;
		c.set( "t_start" ,  __ATTR__t_start );
		Double __ATTR__t_end;
		Double __MY__t_end;
		__ATTR__t_end =  __CONST__t_end;
		__MY__t_end = __ATTR__t_end;
		c.set( "t_end" ,  __ATTR__t_end );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_ConstRouteSH , __STATE___ConstRouteSH_C_arr ));
		return c;
	}

	/* END COMPONENT: ConstRouteSH */


	/* START COMPONENT: BurstRoute2K         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_BurstRoute2K = new CarmaProcessAutomaton("BurstRoute2K");

	public final CarmaProcessAutomaton.State __STATE___BurstRoute2K_Time = _COMP_BurstRoute2K.newState("Time");
	public final CarmaProcessAutomaton.State __STATE___BurstRoute2K_B = _COMP_BurstRoute2K.newState("B");

	private void generateBurstRoute2KBehaviour( ) {


		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__t_bstart = (Double) store.get( "t_bstart" );
					return ( now )<( __ATTR__t_bstart );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__timer , __ACT__timer , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {
							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BurstRoute2K.addTransition(
					__STATE___BurstRoute2K_Time ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BurstRoute2K_Time );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__t_bstart = (Double) store.get( "t_bstart" );
					return ( now )>=( __ATTR__t_bstart );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__bell , __ACT__bell , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {
							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BurstRoute2K.addTransition(
					__STATE___BurstRoute2K_Time ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BurstRoute2K_B );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__duration = (Double) store.get( "duration" );
					Integer __ATTR__threshold = (Integer) store.get( "threshold" );
					return ( __ATTR__duration )<( __ATTR__threshold );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__arrive_bk , __ACT__arrive_bk , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__loc );
						toReturn.add( __CONST__P2PK );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Double __ATTR__duration = (Double) store.get( "duration" );
								store.set( "duration", ( __ATTR__duration )+( 1 ) );
								__ATTR__duration = ( __ATTR__duration )+( 1 );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BurstRoute2K.addTransition(
					__STATE___BurstRoute2K_B ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BurstRoute2K_B );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__duration = (Double) store.get( "duration" );
					Integer __ATTR__threshold = (Integer) store.get( "threshold" );
					return ( __ATTR__duration )>=( __ATTR__threshold );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__empty , __ACT__empty , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {
							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BurstRoute2K.addTransition(
					__STATE___BurstRoute2K_B ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					null );
			}
		}

	}

	public CarmaComponent createComponentBurstRoute2K(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "BurstRoute2K" );
		Double __ATTR__t_bstart;
		Double __MY__t_bstart;
		__ATTR__t_bstart =  __CONST__t_bstart;
		__MY__t_bstart = __ATTR__t_bstart;
		c.set( "t_bstart" ,  __ATTR__t_bstart );
		Double __ATTR__duration;
		Double __MY__duration;
		__ATTR__duration =  0.0;
		__MY__duration = __ATTR__duration;
		c.set( "duration" ,  __ATTR__duration );
		Integer __ATTR__threshold;
		Integer __MY__threshold;
		__ATTR__threshold =  1;
		__MY__threshold = __ATTR__threshold;
		c.set( "threshold" ,  __ATTR__threshold );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_BurstRoute2K , __STATE___BurstRoute2K_Time ));
		return c;
	}

	/* END COMPONENT: BurstRoute2K */


	/* START COMPONENT: BurstRoute2H         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_BurstRoute2H = new CarmaProcessAutomaton("BurstRoute2H");

	public final CarmaProcessAutomaton.State __STATE___BurstRoute2H_Time = _COMP_BurstRoute2H.newState("Time");
	public final CarmaProcessAutomaton.State __STATE___BurstRoute2H_B = _COMP_BurstRoute2H.newState("B");

	private void generateBurstRoute2HBehaviour( ) {


		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__t_bstart = (Double) store.get( "t_bstart" );
					return ( now )<( __ATTR__t_bstart );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__timer , __ACT__timer , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {
							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BurstRoute2H.addTransition(
					__STATE___BurstRoute2H_Time ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BurstRoute2H_Time );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__t_bstart = (Double) store.get( "t_bstart" );
					return ( now )>=( __ATTR__t_bstart );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__bell , __ACT__bell , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {
							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BurstRoute2H.addTransition(
					__STATE___BurstRoute2H_Time ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BurstRoute2H_B );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__duration = (Integer) store.get( "duration" );
					Integer __ATTR__threshold = (Integer) store.get( "threshold" );
					return ( __ATTR__duration )<( __ATTR__threshold );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__arrive_Bh , __ACT__arrive_Bh , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__loc );
						toReturn.add( __CONST__P2PK );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Integer __ATTR__duration = (Integer) store.get( "duration" );
								store.set( "duration", ( __ATTR__duration )+( 1 ) );
								__ATTR__duration = ( __ATTR__duration )+( 1 );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BurstRoute2H.addTransition(
					__STATE___BurstRoute2H_B ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BurstRoute2H_B );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__duration = (Integer) store.get( "duration" );
					Integer __ATTR__threshold = (Integer) store.get( "threshold" );
					return ( __ATTR__duration )>=( __ATTR__threshold );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__empty , __ACT__empty , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {
							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BurstRoute2H.addTransition(
					__STATE___BurstRoute2H_B ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					null );
			}
		}

	}

	public CarmaComponent createComponentBurstRoute2H(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "BurstRoute2H" );
		Double __ATTR__t_bstart;
		Double __MY__t_bstart;
		__ATTR__t_bstart =  __CONST__t_bstart;
		__MY__t_bstart = __ATTR__t_bstart;
		c.set( "t_bstart" ,  __ATTR__t_bstart );
		Integer __ATTR__duration;
		Integer __MY__duration;
		__ATTR__duration =  0;
		__MY__duration = __ATTR__duration;
		c.set( "duration" ,  __ATTR__duration );
		Integer __ATTR__threshold;
		Integer __MY__threshold;
		__ATTR__threshold =  1;
		__MY__threshold = __ATTR__threshold;
		c.set( "threshold" ,  __ATTR__threshold );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_BurstRoute2H , __STATE___BurstRoute2H_Time ));
		return c;
	}

	/* END COMPONENT: BurstRoute2H */


	/* START COMPONENT: TRX         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_TRX = new CarmaProcessAutomaton("TRX");

	public final CarmaProcessAutomaton.State __STATE___TRX_Arrives = _COMP_TRX.newState("Arrives");
	public final CarmaProcessAutomaton.State __STATE___TRX_Save = _COMP_TRX.newState("Save");
	public final CarmaProcessAutomaton.State __STATE___TRX_Q = _COMP_TRX.newState("Q");
	public final CarmaProcessAutomaton.State __STATE___TRX_Validate = _COMP_TRX.newState("Validate");
	public final CarmaProcessAutomaton.State __STATE___TRX_StoreMP = _COMP_TRX.newState("StoreMP");
	public final CarmaProcessAutomaton.State __STATE___TRX_Traverse = _COMP_TRX.newState("Traverse");

	private void generateTRXBehaviour( ) {


		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__arrive_CK , __ACT__arrive_CK , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final Node __VARIABLE__x = (Node) message.get(0);
					final int __VARIABLE__y = (Integer) message.get(1);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "loc", __VARIABLE__x );
							store.set( "TRXbytes", __VARIABLE__y );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_TRX.addTransition(
				__STATE___TRX_Arrives ,
				action ,
				__STATE___TRX_Save );
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__arrive_CH , __ACT__arrive_CH , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final Node __VARIABLE__x = (Node) message.get(0);
					final int __VARIABLE__y = (Integer) message.get(1);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "loc", __VARIABLE__x );
							store.set( "TRXbytes", __VARIABLE__y );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_TRX.addTransition(
				__STATE___TRX_Arrives ,
				action ,
				__STATE___TRX_Save );
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__arrive_bk , __ACT__arrive_bk , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final Node __VARIABLE__x = (Node) message.get(0);
					final int __VARIABLE__y = (Integer) message.get(1);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "loc", __VARIABLE__x );
							store.set( "TRXbytes", __VARIABLE__y );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_TRX.addTransition(
				__STATE___TRX_Arrives ,
				action ,
				__STATE___TRX_Save );
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__arrive_Bh , __ACT__arrive_Bh , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final Node __VARIABLE__x = (Node) message.get(0);
					final int __VARIABLE__y = (Integer) message.get(1);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "loc", __VARIABLE__x );
							store.set( "TRXbytes", __VARIABLE__y );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_TRX.addTransition(
				__STATE___TRX_Arrives ,
				action ,
				__STATE___TRX_Save );
		}
		{
			CarmaAction action = new CarmaOutput(
				__ACT_NAME__storeTRX , __ACT__storeTRX , false
			) {

				@Override
				protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
					LinkedList<Object> toReturn = new LinkedList<Object>();
					Integer __ATTR__TRXbytes = (Integer) store.get( "TRXbytes" );
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					toReturn.add( __ATTR__TRXbytes );
					return toReturn;
				}

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							final Node __MY__loc = store.get( "loc" , Node.class );
							final Node __ATTR__loc = store.get( "loc" , Node.class );
						}
					};
				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
					final Node __MY__loc = myStore.get( "loc" , Node.class );
					return new CarmaPredicate() {

						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							try {
								Node __ATTR__loc = store.get( "loc" , Node.class );
								return carmaEquals( __MY__loc , __ATTR__loc );
							} catch (NullPointerException e) {
								return false;
							}
						}

					};

				}
			};

			_COMP_TRX.addTransition(
				__STATE___TRX_Save ,
				action ,
				__STATE___TRX_Q );
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__assignQorder , __ACT__assignQorder , true
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__x = (Integer) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "queuepos", __VARIABLE__x );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
							LinkedList<Object> message = (LinkedList<Object>) value;
							final int __VARIABLE__x = (Integer) message.get(0);
							final Node __MY__loc = myStore.get( "loc" , Node.class );
							return new CarmaPredicate() {

								//@Override
								public boolean satisfy(double now,CarmaStore store) {
									try {
										Node __ATTR__loc = store.get( "loc" , Node.class );
										return carmaEquals( __ATTR__loc , __MY__loc );
									} catch (NullPointerException e) {
										return false;
									}
								}

							};

				}

			};

			_COMP_TRX.addTransition(
				__STATE___TRX_Q ,
				action ,
				__STATE___TRX_Validate );
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__queuepos = (Integer) store.get( "queuepos" );
					return ( __ATTR__queuepos )>( 1 );
				}

			};
			{
				CarmaAction action = new CarmaInput(
					__ACT_NAME__validateTRX , __ACT__validateTRX , true
				) {

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

						LinkedList<Object> message = (LinkedList<Object>) value;
						final int __VARIABLE__y = (Integer) message.get(0);
						final Node __VARIABLE__x = (Node) message.get(1);
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								Integer __ATTR__queuepos = (Integer) store.get( "queuepos" );
								Node __MY__loc = store.get( "loc" , Node.class );
								Node __ATTR__loc = store.get( "loc" , Node.class );
								store.set( "queuepos", ( __ATTR__queuepos )-( 1 ) );
								__ATTR__queuepos = ( __ATTR__queuepos )-( 1 );
							}
						};

					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
								LinkedList<Object> message = (LinkedList<Object>) value;
								final int __VARIABLE__y = (Integer) message.get(0);
								final Node __VARIABLE__x = (Node) message.get(1);
								final Node __MY__loc = myStore.get( "loc" , Node.class );
								return new CarmaPredicate() {

									//@Override
									public boolean satisfy(double now,CarmaStore store) {
										try {
											Node __ATTR__loc = store.get( "loc" , Node.class );
											return carmaEquals( __ATTR__loc , __MY__loc );
										} catch (NullPointerException e) {
											return false;
										}
									}

								};

					}

				};

				_COMP_TRX.addTransition(
					__STATE___TRX_Validate ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___TRX_Validate );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__queuepos = (Integer) store.get( "queuepos" );
					return carmaEquals( __ATTR__queuepos , 1 );
				}

			};
			{
				CarmaAction action = new CarmaInput(
					__ACT_NAME__validateTRX , __ACT__validateTRX , true
				) {

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

						LinkedList<Object> message = (LinkedList<Object>) value;
						final int __VARIABLE__y = (Integer) message.get(0);
						final Node __VARIABLE__x = (Node) message.get(1);
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								Integer __ATTR__queuepos = (Integer) store.get( "queuepos" );
								Node __MY__loc = store.get( "loc" , Node.class );
								Node __ATTR__loc = store.get( "loc" , Node.class );
								store.set( "queuepos", ( __ATTR__queuepos )-( 1 ) );
								__ATTR__queuepos = ( __ATTR__queuepos )-( 1 );
								store.set( "next", __FUN__nextNode(
											__VARIABLE__x
										) );
							}
						};

					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
								LinkedList<Object> message = (LinkedList<Object>) value;
								final int __VARIABLE__y = (Integer) message.get(0);
								final Node __VARIABLE__x = (Node) message.get(1);
								final Node __MY__loc = myStore.get( "loc" , Node.class );
								return new CarmaPredicate() {

									//@Override
									public boolean satisfy(double now,CarmaStore store) {
										try {
											Node __ATTR__loc = store.get( "loc" , Node.class );
											return carmaEquals( __ATTR__loc , __MY__loc );
										} catch (NullPointerException e) {
											return false;
										}
									}

								};

					}

				};

				_COMP_TRX.addTransition(
					__STATE___TRX_Validate ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___TRX_StoreMP );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Boolean __ATTR__toMP = (Boolean) store.get( "toMP" );
					return carmaEquals( __ATTR__toMP , false );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__ready , __ACT__ready , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__TRXbytes = (Integer) store.get( "TRXbytes" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__TRXbytes );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								store.set( "toMP", true );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_TRX.addTransition(
					__STATE___TRX_StoreMP ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___TRX_Traverse );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Boolean __ATTR__toMP = (Boolean) store.get( "toMP" );
					return carmaEquals( __ATTR__toMP , true );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__simplyMove , __ACT__simplyMove , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_TRX.addTransition(
					__STATE___TRX_StoreMP ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___TRX_Traverse );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__nodeCount = (Integer) store.get( "nodeCount" );
					Node __ATTR__next = (Node) store.get( "next" );
					return ( ( __ATTR__nodeCount )<( ( __CONST__nodenumber )-( 1 ) ) )&&( !( carmaEquals( __ATTR__next , __MY__loc ) ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__move , __ACT__move , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__TRXbytes = (Integer) store.get( "TRXbytes" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__TRXbytes );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Node __ATTR__next = (Node) store.get( "next" );
								Integer __ATTR__nodeCount = (Integer) store.get( "nodeCount" );
								store.set( "loc", __ATTR__next );
								store.set( "next", null );
								__ATTR__next = null;
								store.set( "nodeCount", ( __ATTR__nodeCount )+( 1 ) );
								__ATTR__nodeCount = ( __ATTR__nodeCount )+( 1 );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_TRX.addTransition(
					__STATE___TRX_Traverse ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___TRX_Save );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__nodeCount = (Integer) store.get( "nodeCount" );
					return carmaEquals( __ATTR__nodeCount , ( __CONST__nodenumber )-( 1 ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__killTRX , __ACT__killTRX , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_TRX.addTransition(
					__STATE___TRX_Traverse ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					null ,
					true);
			}
		}

	}

	public CarmaComponent createComponentTRX(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "TRX" );
		Node __ATTR__next;
		Node __MY__next;
		__ATTR__next =  null;
		__MY__next = __ATTR__next;
		c.set( "next" ,  __ATTR__next );
		Integer __ATTR__queuepos;
		Integer __MY__queuepos;
		__ATTR__queuepos =  0;
		__MY__queuepos = __ATTR__queuepos;
		c.set( "queuepos" ,  __ATTR__queuepos );
		Integer __ATTR__nodeCount;
		Integer __MY__nodeCount;
		__ATTR__nodeCount =  0;
		__MY__nodeCount = __ATTR__nodeCount;
		c.set( "nodeCount" ,  __ATTR__nodeCount );
		Integer __ATTR__TRXbytes;
		Integer __MY__TRXbytes;
		__ATTR__TRXbytes =  0;
		__MY__TRXbytes = __ATTR__TRXbytes;
		c.set( "TRXbytes" ,  __ATTR__TRXbytes );
		Double __ATTR__time;
		Double __MY__time;
		__ATTR__time =  0.0;
		__MY__time = __ATTR__time;
		c.set( "time" ,  __ATTR__time );
		Boolean __ATTR__toMP;
		Boolean __MY__toMP;
		__ATTR__toMP =  false;
		__MY__toMP = __ATTR__toMP;
		c.set( "toMP" ,  __ATTR__toMP );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_TRX , __STATE___TRX_Arrives ));
		return c;
	}

	/* END COMPONENT: TRX */


	/* START COMPONENT: Node         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_Node = new CarmaProcessAutomaton("Node");

	public final CarmaProcessAutomaton.State __STATE___Node_inTRX = _COMP_Node.newState("inTRX");
	public final CarmaProcessAutomaton.State __STATE___Node_qTRX = _COMP_Node.newState("qTRX");
	public final CarmaProcessAutomaton.State __STATE___Node_vTRX = _COMP_Node.newState("vTRX");
	public final CarmaProcessAutomaton.State __STATE___Node_sendMP = _COMP_Node.newState("sendMP");
	public final CarmaProcessAutomaton.State __STATE___Node_push = _COMP_Node.newState("push");
	public final CarmaProcessAutomaton.State __STATE___Node_ArriveBlock = _COMP_Node.newState("ArriveBlock");
	public final CarmaProcessAutomaton.State __STATE___Node_inBlock = _COMP_Node.newState("inBlock");
	public final CarmaProcessAutomaton.State __STATE___Node_qBlock = _COMP_Node.newState("qBlock");
	public final CarmaProcessAutomaton.State __STATE___Node_vBlock = _COMP_Node.newState("vBlock");

	private void generateNodeBehaviour( ) {


		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__storeTRX , __ACT__storeTRX , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__bytes = (Integer) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Integer __ATTR__myTRX = (Integer) store.get( "myTRX" );
							Integer __ATTR__cache = (Integer) store.get( "cache" );
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "myTRX", ( __ATTR__myTRX )+( 1 ) );
							__ATTR__myTRX = ( __ATTR__myTRX )+( 1 );
							store.set( "cache", ( __ATTR__cache )+( __VARIABLE__bytes ) );
							__ATTR__cache = ( __ATTR__cache )+( __VARIABLE__bytes );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
							LinkedList<Object> message = (LinkedList<Object>) value;
							final int __VARIABLE__bytes = (Integer) message.get(0);
							final Node __MY__loc = myStore.get( "loc" , Node.class );
							return new CarmaPredicate() {

								//@Override
								public boolean satisfy(double now,CarmaStore store) {
									try {
										Node __ATTR__loc = store.get( "loc" , Node.class );
										return carmaEquals( __MY__loc , __ATTR__loc );
									} catch (NullPointerException e) {
										return false;
									}
								}

							};

				}

			};

			_COMP_Node.addTransition(
				__STATE___Node_inTRX ,
				action ,
				__STATE___Node_qTRX );
		}
		{
			CarmaAction action = new CarmaOutput(
				__ACT_NAME__assignQorder , __ACT__assignQorder , true
			) {

				@Override
				protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
					LinkedList<Object> toReturn = new LinkedList<Object>();
					Integer __ATTR__myTRX = (Integer) store.get( "myTRX" );
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					toReturn.add( __ATTR__myTRX );
					return toReturn;
				}

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
					return new CarmaStoreUpdate() {
						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
						}
					};
				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
					final Node __MY__loc = myStore.get( "loc" , Node.class );
					return new CarmaPredicate() {

						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							try {
								Node __ATTR__loc = store.get( "loc" , Node.class );
								return carmaEquals( __ATTR__loc , __MY__loc );
							} catch (NullPointerException e) {
								return false;
							}
						}

					};

				}
			};

			_COMP_Node.addTransition(
				__STATE___Node_qTRX ,
				action ,
				__STATE___Node_inTRX );
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__myTRX = (Integer) store.get( "myTRX" );
					Integer __ATTR__cache = (Integer) store.get( "cache" );
					Integer __ATTR__P2PK = (Integer) store.get( "P2PK" );
					return ( ( __ATTR__myTRX )>=( 1 ) )&&( ( __ATTR__cache )>=( __ATTR__P2PK ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__validateTRX , __ACT__validateTRX , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__P2PK = (Integer) store.get( "P2PK" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__P2PK );
						toReturn.add( __MY__loc );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Integer __ATTR__myTRX = (Integer) store.get( "myTRX" );
								Integer __ATTR__cache = (Integer) store.get( "cache" );
								Integer __ATTR__P2PK = (Integer) store.get( "P2PK" );
								store.set( "myTRX", ( __ATTR__myTRX )-( 1 ) );
								__ATTR__myTRX = ( __ATTR__myTRX )-( 1 );
								store.set( "cache", ( __ATTR__cache )-( __ATTR__P2PK ) );
								__ATTR__cache = ( __ATTR__cache )-( __ATTR__P2PK );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						final Node __MY__loc = myStore.get( "loc" , Node.class );
						return new CarmaPredicate() {

							//@Override
							public boolean satisfy(double now,CarmaStore store) {
								try {
									Node __ATTR__loc = store.get( "loc" , Node.class );
									return carmaEquals( __ATTR__loc , __MY__loc );
								} catch (NullPointerException e) {
									return false;
								}
							}

						};

					}
				};

				_COMP_Node.addTransition(
					__STATE___Node_vTRX ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___Node_vTRX );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__myTRX = (Integer) store.get( "myTRX" );
					Integer __ATTR__cache = (Integer) store.get( "cache" );
					Integer __ATTR__P2SH = (Integer) store.get( "P2SH" );
					return ( ( __ATTR__myTRX )>=( 1 ) )&&( ( __ATTR__cache )>=( __ATTR__P2SH ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__validateTRX , __ACT__validateTRX , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__P2SH = (Integer) store.get( "P2SH" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__P2SH );
						toReturn.add( __MY__loc );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Integer __ATTR__myTRX = (Integer) store.get( "myTRX" );
								Integer __ATTR__cache = (Integer) store.get( "cache" );
								Integer __ATTR__P2SH = (Integer) store.get( "P2SH" );
								store.set( "myTRX", ( __ATTR__myTRX )-( 1 ) );
								__ATTR__myTRX = ( __ATTR__myTRX )-( 1 );
								store.set( "cache", ( __ATTR__cache )-( __ATTR__P2SH ) );
								__ATTR__cache = ( __ATTR__cache )-( __ATTR__P2SH );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						final Node __MY__loc = myStore.get( "loc" , Node.class );
						return new CarmaPredicate() {

							//@Override
							public boolean satisfy(double now,CarmaStore store) {
								try {
									Node __ATTR__loc = store.get( "loc" , Node.class );
									return carmaEquals( __ATTR__loc , __MY__loc );
								} catch (NullPointerException e) {
									return false;
								}
							}

						};

					}
				};

				_COMP_Node.addTransition(
					__STATE___Node_vTRX ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___Node_vTRX );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__myTRX = (Integer) store.get( "myTRX" );
					Integer __ATTR__cache = (Integer) store.get( "cache" );
					return ( carmaEquals( __ATTR__myTRX , 0 ) )&&( !( carmaEquals( __ATTR__cache , 0 ) ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__flush , __ACT__flush , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								store.set( "cache", 0 );
								store.set( "myTRX", 0 );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_Node.addTransition(
					__STATE___Node_vTRX ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___Node_vTRX );
			}
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__ready , __ACT__ready , true
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__x = (Integer) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_Node.addTransition(
				__STATE___Node_sendMP ,
				action ,
				__STATE___Node_push );
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__simplyMove , __ACT__simplyMove , true
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_Node.addTransition(
				__STATE___Node_sendMP ,
				action ,
				__STATE___Node_push );
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__move , __ACT__move , true
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__x = (Integer) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Integer __ATTR__cache = (Integer) store.get( "cache" );
							Integer __ATTR__myTRX = (Integer) store.get( "myTRX" );
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "cache", ( __ATTR__cache )+( __VARIABLE__x ) );
							__ATTR__cache = ( __ATTR__cache )+( __VARIABLE__x );
							store.set( "myTRX", ( __ATTR__myTRX )+( 1 ) );
							__ATTR__myTRX = ( __ATTR__myTRX )+( 1 );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_Node.addTransition(
				__STATE___Node_push ,
				action ,
				__STATE___Node_sendMP );
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__arriveBlock , __ACT__arriveBlock , true
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__x = (Integer) message.get(0);
					final int __VARIABLE__y = (Integer) message.get(1);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_Node.addTransition(
				__STATE___Node_ArriveBlock ,
				action ,
				__STATE___Node_inBlock );
		}
		{
			CarmaAction action = new CarmaOutput(
				__ACT_NAME__storeBlock , __ACT__storeBlock , false
			) {

				@Override
				protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
					LinkedList<Object> toReturn = new LinkedList<Object>();
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					toReturn.add( __MY__loc );
					return toReturn;
				}

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							final Node __MY__loc = store.get( "loc" , Node.class );
							final Node __ATTR__loc = store.get( "loc" , Node.class );
							Integer __ATTR__block_cache = (Integer) store.get( "block_cache" );
							Integer __ATTR__blocks_saved = (Integer) store.get( "blocks_saved" );
							Integer __ATTR__block_queue = (Integer) store.get( "block_queue" );
							store.set( "block_cache", ( __ATTR__block_cache )+( __CONST__block_size ) );
							__ATTR__block_cache = ( __ATTR__block_cache )+( __CONST__block_size );
							store.set( "blocks_saved", ( __ATTR__blocks_saved )+( 1 ) );
							__ATTR__blocks_saved = ( __ATTR__blocks_saved )+( 1 );
							store.set( "block_queue", ( __ATTR__block_queue )+( 1 ) );
							__ATTR__block_queue = ( __ATTR__block_queue )+( 1 );
						}
					};
				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
					return CarmaPredicate.TRUE;

				}
			};

			_COMP_Node.addTransition(
				__STATE___Node_inBlock ,
				action ,
				__STATE___Node_qBlock );
		}
		{
			CarmaAction action = new CarmaOutput(
				__ACT_NAME__assignToQ , __ACT__assignToQ , true
			) {

				@Override
				protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
					LinkedList<Object> toReturn = new LinkedList<Object>();
					Integer __ATTR__block_queue = (Integer) store.get( "block_queue" );
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					toReturn.add( __ATTR__block_queue );
					return toReturn;
				}

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							final Node __MY__loc = store.get( "loc" , Node.class );
							final Node __ATTR__loc = store.get( "loc" , Node.class );
						}
					};
				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
					final Node __MY__loc = myStore.get( "loc" , Node.class );
					return new CarmaPredicate() {

						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							try {
								Node __ATTR__loc = store.get( "loc" , Node.class );
								return carmaEquals( __ATTR__loc , __MY__loc );
							} catch (NullPointerException e) {
								return false;
							}
						}

					};

				}
			};

			_COMP_Node.addTransition(
				__STATE___Node_qBlock ,
				action ,
				__STATE___Node_ArriveBlock );
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__block_queue = (Integer) store.get( "block_queue" );
					return ( __ATTR__block_queue )>( 0 );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__validateBlock , __ACT__validateBlock , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Integer __ATTR__block_cache = (Integer) store.get( "block_cache" );
								Integer __ATTR__block_queue = (Integer) store.get( "block_queue" );
								store.set( "block_cache", ( __ATTR__block_cache )-( __CONST__block_size ) );
								__ATTR__block_cache = ( __ATTR__block_cache )-( __CONST__block_size );
								store.set( "block_queue", ( __ATTR__block_queue )-( 1 ) );
								__ATTR__block_queue = ( __ATTR__block_queue )-( 1 );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						final Node __MY__loc = myStore.get( "loc" , Node.class );
						return new CarmaPredicate() {

							//@Override
							public boolean satisfy(double now,CarmaStore store) {
								try {
									Node __ATTR__loc = store.get( "loc" , Node.class );
									return carmaEquals( __MY__loc , __ATTR__loc );
								} catch (NullPointerException e) {
									return false;
								}
							}

						};

					}
				};

				_COMP_Node.addTransition(
					__STATE___Node_vBlock ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___Node_vBlock );
			}
		}

	}

	public CarmaComponent createComponentNode(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "Node" );
		Integer __ATTR__myTRX;
		Integer __MY__myTRX;
		__ATTR__myTRX =  0;
		__MY__myTRX = __ATTR__myTRX;
		c.set( "myTRX" ,  __ATTR__myTRX );
		Integer __ATTR__cache;
		Integer __MY__cache;
		__ATTR__cache =  0;
		__MY__cache = __ATTR__cache;
		c.set( "cache" ,  __ATTR__cache );
		Integer __ATTR__P2PK;
		Integer __MY__P2PK;
		__ATTR__P2PK =  250;
		__MY__P2PK = __ATTR__P2PK;
		c.set( "P2PK" ,  __ATTR__P2PK );
		Integer __ATTR__P2SH;
		Integer __MY__P2SH;
		__ATTR__P2SH =  750;
		__MY__P2SH = __ATTR__P2SH;
		c.set( "P2SH" ,  __ATTR__P2SH );
		Boolean __ATTR__MP;
		Boolean __MY__MP;
		__ATTR__MP =  true;
		__MY__MP = __ATTR__MP;
		c.set( "MP" ,  __ATTR__MP );
		Integer __ATTR__blocks_saved;
		Integer __MY__blocks_saved;
		__ATTR__blocks_saved =  0;
		__MY__blocks_saved = __ATTR__blocks_saved;
		c.set( "blocks_saved" ,  __ATTR__blocks_saved );
		Integer __ATTR__block_queue;
		Integer __MY__block_queue;
		__ATTR__block_queue =  0;
		__MY__block_queue = __ATTR__block_queue;
		c.set( "block_queue" ,  __ATTR__block_queue );
		Integer __ATTR__block_cache;
		Integer __MY__block_cache;
		__ATTR__block_cache =  0;
		__MY__block_cache = __ATTR__block_cache;
		c.set( "block_cache" ,  __ATTR__block_cache );
		Double __ATTR__getTime;
		Double __MY__getTime;
		__ATTR__getTime =  0.0;
		__MY__getTime = __ATTR__getTime;
		c.set( "getTime" ,  __ATTR__getTime );
		Boolean __ATTR__valid;
		Boolean __MY__valid;
		__ATTR__valid =  false;
		__MY__valid = __ATTR__valid;
		c.set( "valid" ,  __ATTR__valid );
		Integer __ATTR__total_mem;
		Integer __MY__total_mem;
		__ATTR__total_mem =  ( __ATTR__block_cache )+( __ATTR__cache );
		__MY__total_mem = __ATTR__total_mem;
		c.set( "total_mem" ,  __ATTR__total_mem );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_Node , __STATE___Node_inTRX ));
		c.addAgent( new CarmaSequentialProcess( c , _COMP_Node , __STATE___Node_vTRX ));
		c.addAgent( new CarmaSequentialProcess( c , _COMP_Node , __STATE___Node_sendMP ));
		c.addAgent( new CarmaSequentialProcess( c , _COMP_Node , __STATE___Node_ArriveBlock ));
		c.addAgent( new CarmaSequentialProcess( c , _COMP_Node , __STATE___Node_vBlock ));
		return c;
	}

	/* END COMPONENT: Node */


	/* START COMPONENT: BlockRouter         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_BlockRouter = new CarmaProcessAutomaton("BlockRouter");

	public final CarmaProcessAutomaton.State __STATE___BlockRouter_Ready3 = _COMP_BlockRouter.newState("Ready3");
	public final CarmaProcessAutomaton.State __STATE___BlockRouter_Send3 = _COMP_BlockRouter.newState("Send3");
	public final CarmaProcessAutomaton.State __STATE___BlockRouter_Ready12 = _COMP_BlockRouter.newState("Ready12");
	public final CarmaProcessAutomaton.State __STATE___BlockRouter_Send12 = _COMP_BlockRouter.newState("Send12");

	private void generateBlockRouterBehaviour( ) {


		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__prepare , __ACT__prepare , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__x = (Integer) message.get(0);
					final int __VARIABLE__y = (Integer) message.get(1);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Integer __ATTR__Router_blocks = (Integer) store.get( "Router_blocks" );
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "Router_blocks", ( __ATTR__Router_blocks )+( 1 ) );
							__ATTR__Router_blocks = ( __ATTR__Router_blocks )+( 1 );
							store.set( "data", __VARIABLE__y );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
							LinkedList<Object> message = (LinkedList<Object>) value;
							final int __VARIABLE__x = (Integer) message.get(0);
							final int __VARIABLE__y = (Integer) message.get(1);
							final Node __MY__loc = myStore.get( "loc" , Node.class );
							return new CarmaPredicate() {

								//@Override
								public boolean satisfy(double now,CarmaStore store) {
									try {
										Node __ATTR__loc = store.get( "loc" , Node.class );
										return carmaEquals( __ATTR__loc , __MY__loc );
									} catch (NullPointerException e) {
										return false;
									}
								}

							};

				}

			};

			_COMP_BlockRouter.addTransition(
				__STATE___BlockRouter_Ready3 ,
				action ,
				__STATE___BlockRouter_Send3 );
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__Router_blocks = (Integer) store.get( "Router_blocks" );
					return carmaEquals( __ATTR__Router_blocks , 1 );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__arriveBlock , __ACT__arriveBlock , true
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__Router_blocks = (Integer) store.get( "Router_blocks" );
						Integer __ATTR__data = (Integer) store.get( "data" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__Router_blocks );
						toReturn.add( __ATTR__data );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Integer __ATTR__Router_blocks = (Integer) store.get( "Router_blocks" );
								store.set( "data", 0 );
								store.set( "Router_blocks", ( __ATTR__Router_blocks )-( 1 ) );
								__ATTR__Router_blocks = ( __ATTR__Router_blocks )-( 1 );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BlockRouter.addTransition(
					__STATE___BlockRouter_Send3 ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BlockRouter_Ready3 );
			}
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__prepare , __ACT__prepare , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__x = (Integer) message.get(0);
					final int __VARIABLE__y = (Integer) message.get(1);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Integer __ATTR__Router_blocks = (Integer) store.get( "Router_blocks" );
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "Router_blocks", ( __ATTR__Router_blocks )+( 1 ) );
							__ATTR__Router_blocks = ( __ATTR__Router_blocks )+( 1 );
							store.set( "data", __VARIABLE__y );
							store.set( "blockReceiver", __FUN__nextNode(
										__MY__loc
									) );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
							LinkedList<Object> message = (LinkedList<Object>) value;
							final int __VARIABLE__x = (Integer) message.get(0);
							final int __VARIABLE__y = (Integer) message.get(1);
							final Node __MY__loc = myStore.get( "loc" , Node.class );
							return new CarmaPredicate() {

								//@Override
								public boolean satisfy(double now,CarmaStore store) {
									try {
										Node __ATTR__loc = store.get( "loc" , Node.class );
										return carmaEquals( __ATTR__loc , __MY__loc );
									} catch (NullPointerException e) {
										return false;
									}
								}

							};

				}

			};

			_COMP_BlockRouter.addTransition(
				__STATE___BlockRouter_Ready12 ,
				action ,
				__STATE___BlockRouter_Send12 );
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__Router_blocks = (Integer) store.get( "Router_blocks" );
					return carmaEquals( __ATTR__Router_blocks , 1 );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__arriveBlock , __ACT__arriveBlock , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Node __ATTR__blockReceiver = (Node) store.get( "blockReceiver" );
						Integer __ATTR__data = (Integer) store.get( "data" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__blockReceiver );
						toReturn.add( __ATTR__data );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Integer __ATTR__Router_blocks = (Integer) store.get( "Router_blocks" );
								store.set( "Router_blocks", ( __ATTR__Router_blocks )-( 1 ) );
								__ATTR__Router_blocks = ( __ATTR__Router_blocks )-( 1 );
								store.set( "data", 0 );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_BlockRouter.addTransition(
					__STATE___BlockRouter_Send12 ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BlockRouter_Ready12 );
			}
		}

	}

	public CarmaComponent createComponentBlockRouter(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "BlockRouter" );
		Integer __ATTR__Router_blocks;
		Integer __MY__Router_blocks;
		__ATTR__Router_blocks =  0;
		__MY__Router_blocks = __ATTR__Router_blocks;
		c.set( "Router_blocks" ,  __ATTR__Router_blocks );
		Node __ATTR__blockReceiver;
		Node __MY__blockReceiver;
		__ATTR__blockReceiver =  null;
		__MY__blockReceiver = __ATTR__blockReceiver;
		c.set( "blockReceiver" ,  __ATTR__blockReceiver );
		Integer __ATTR__data;
		Integer __MY__data;
		__ATTR__data =  0;
		__MY__data = __ATTR__data;
		c.set( "data" ,  __ATTR__data );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_BlockRouter , __STATE___BlockRouter_Ready3 ));
		return c;
	}

	/* END COMPONENT: BlockRouter */


	/* START COMPONENT: BlockProducer         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_BlockProducer = new CarmaProcessAutomaton("BlockProducer");

	public final CarmaProcessAutomaton.State __STATE___BlockProducer_Produce = _COMP_BlockProducer.newState("Produce");
	public final CarmaProcessAutomaton.State __STATE___BlockProducer_UseRouter = _COMP_BlockProducer.newState("UseRouter");

	private void generateBlockProducerBehaviour( ) {


		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__produce , __ACT__produce , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__x = (Integer) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Integer __ATTR__producedBlocks = (Integer) store.get( "producedBlocks" );
							Integer __ATTR__memory = (Integer) store.get( "memory" );
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "producedBlocks", ( __ATTR__producedBlocks )+( 1 ) );
							__ATTR__producedBlocks = ( __ATTR__producedBlocks )+( 1 );
							store.set( "memory", ( __ATTR__memory )+( __VARIABLE__x ) );
							__ATTR__memory = ( __ATTR__memory )+( __VARIABLE__x );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_BlockProducer.addTransition(
				__STATE___BlockProducer_Produce ,
				action ,
				__STATE___BlockProducer_Produce );
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__producedBlocks = (Integer) store.get( "producedBlocks" );
					Integer __ATTR__counter = (Integer) store.get( "counter" );
					return ( __ATTR__producedBlocks )>=( ( 1 )*( __ATTR__counter ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__prepare , __ACT__prepare , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__producedBlocks = (Integer) store.get( "producedBlocks" );
						Integer __ATTR__memory = (Integer) store.get( "memory" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__producedBlocks );
						toReturn.add( __ATTR__memory );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Integer __ATTR__memory = (Integer) store.get( "memory" );
								Integer __ATTR__counter = (Integer) store.get( "counter" );
								store.set( "memory", ( __ATTR__memory )-( __CONST__block_size ) );
								__ATTR__memory = ( __ATTR__memory )-( __CONST__block_size );
								store.set( "counter", ( __ATTR__counter )+( 1 ) );
								__ATTR__counter = ( __ATTR__counter )+( 1 );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						final Node __MY__loc = myStore.get( "loc" , Node.class );
						return new CarmaPredicate() {

							//@Override
							public boolean satisfy(double now,CarmaStore store) {
								try {
									Node __ATTR__loc = store.get( "loc" , Node.class );
									return carmaEquals( __MY__loc , __ATTR__loc );
								} catch (NullPointerException e) {
									return false;
								}
							}

						};

					}
				};

				_COMP_BlockProducer.addTransition(
					__STATE___BlockProducer_UseRouter ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___BlockProducer_UseRouter );
			}
		}

	}

	public CarmaComponent createComponentBlockProducer(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "BlockProducer" );
		Integer __ATTR__producedBlocks;
		Integer __MY__producedBlocks;
		__ATTR__producedBlocks =  0;
		__MY__producedBlocks = __ATTR__producedBlocks;
		c.set( "producedBlocks" ,  __ATTR__producedBlocks );
		Integer __ATTR__memory;
		Integer __MY__memory;
		__ATTR__memory =  0;
		__MY__memory = __ATTR__memory;
		c.set( "memory" ,  __ATTR__memory );
		Integer __ATTR__counter;
		Integer __MY__counter;
		__ATTR__counter =  1;
		__MY__counter = __ATTR__counter;
		c.set( "counter" ,  __ATTR__counter );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_BlockProducer , __STATE___BlockProducer_Produce ));
		c.addAgent( new CarmaSequentialProcess( c , _COMP_BlockProducer , __STATE___BlockProducer_UseRouter ));
		return c;
	}

	/* END COMPONENT: BlockProducer */


	/* START COMPONENT: Block         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_Block = new CarmaProcessAutomaton("Block");

	public final CarmaProcessAutomaton.State __STATE___Block_SaveBlock = _COMP_Block.newState("SaveBlock");
	public final CarmaProcessAutomaton.State __STATE___Block_QueueBlock = _COMP_Block.newState("QueueBlock");
	public final CarmaProcessAutomaton.State __STATE___Block_Validate = _COMP_Block.newState("Validate");
	public final CarmaProcessAutomaton.State __STATE___Block_Consensus = _COMP_Block.newState("Consensus");

	private void generateBlockBehaviour( ) {


		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__storeBlock , __ACT__storeBlock , false
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final Node __VARIABLE__x = (Node) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "loc", __VARIABLE__x );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_Block.addTransition(
				__STATE___Block_SaveBlock ,
				action ,
				__STATE___Block_QueueBlock );
		}
		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__assignToQ , __ACT__assignToQ , true
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__x = (Integer) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "queuePosition", __VARIABLE__x );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
							LinkedList<Object> message = (LinkedList<Object>) value;
							final int __VARIABLE__x = (Integer) message.get(0);
							final Node __MY__loc = myStore.get( "loc" , Node.class );
							return new CarmaPredicate() {

								//@Override
								public boolean satisfy(double now,CarmaStore store) {
									try {
										Node __ATTR__loc = store.get( "loc" , Node.class );
										return carmaEquals( __ATTR__loc , __MY__loc );
									} catch (NullPointerException e) {
										return false;
									}
								}

							};

				}

			};

			_COMP_Block.addTransition(
				__STATE___Block_QueueBlock ,
				action ,
				__STATE___Block_Validate );
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__queuePosition = (Integer) store.get( "queuePosition" );
					return carmaEquals( __ATTR__queuePosition , 1 );
				}

			};
			{
				CarmaAction action = new CarmaInput(
					__ACT_NAME__validateBlock , __ACT__validateBlock , false
				) {

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

						LinkedList<Object> message = (LinkedList<Object>) value;
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								Integer __ATTR__queuePosition = (Integer) store.get( "queuePosition" );
								Node __MY__loc = store.get( "loc" , Node.class );
								Node __ATTR__loc = store.get( "loc" , Node.class );
								store.set( "next", __FUN__nextNode(
											__MY__loc
										) );
								store.set( "queuePosition", ( __ATTR__queuePosition )-( 1 ) );
								__ATTR__queuePosition = ( __ATTR__queuePosition )-( 1 );
							}
						};

					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
								LinkedList<Object> message = (LinkedList<Object>) value;
								final Node __MY__loc = myStore.get( "loc" , Node.class );
								return new CarmaPredicate() {

									//@Override
									public boolean satisfy(double now,CarmaStore store) {
										try {
											Node __ATTR__loc = store.get( "loc" , Node.class );
											return carmaEquals( __ATTR__loc , __MY__loc );
										} catch (NullPointerException e) {
											return false;
										}
									}

								};

					}

				};

				_COMP_Block.addTransition(
					__STATE___Block_Validate ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___Block_Consensus );
			}
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Integer __ATTR__queuePosition = (Integer) store.get( "queuePosition" );
					return ( __ATTR__queuePosition )>( 1 );
				}

			};
			{
				CarmaAction action = new CarmaInput(
					__ACT_NAME__validateBlock , __ACT__validateBlock , false
				) {

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

						LinkedList<Object> message = (LinkedList<Object>) value;
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								Integer __ATTR__queuePosition = (Integer) store.get( "queuePosition" );
								Node __MY__loc = store.get( "loc" , Node.class );
								Node __ATTR__loc = store.get( "loc" , Node.class );
								store.set( "queuePosition", ( __ATTR__queuePosition )-( 1 ) );
								__ATTR__queuePosition = ( __ATTR__queuePosition )-( 1 );
							}
						};

					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
								LinkedList<Object> message = (LinkedList<Object>) value;
								final Node __MY__loc = myStore.get( "loc" , Node.class );
								return new CarmaPredicate() {

									//@Override
									public boolean satisfy(double now,CarmaStore store) {
										try {
											Node __ATTR__loc = store.get( "loc" , Node.class );
											return carmaEquals( __ATTR__loc , __MY__loc );
										} catch (NullPointerException e) {
											return false;
										}
									}

								};

					}

				};

				_COMP_Block.addTransition(
					__STATE___Block_Validate ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___Block_Validate );
			}
		}
		{
			CarmaAction action = new CarmaOutput(
				__ACT_NAME__append , __ACT__append , true
			) {

				@Override
				protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
					LinkedList<Object> toReturn = new LinkedList<Object>();
					Integer __ATTR__data_value = (Integer) store.get( "data_value" );
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					toReturn.add( __ATTR__data_value );
					return toReturn;
				}

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							final Node __MY__loc = store.get( "loc" , Node.class );
							final Node __ATTR__loc = store.get( "loc" , Node.class );
						}
					};
				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
					final Node __MY__loc = myStore.get( "loc" , Node.class );
					return new CarmaPredicate() {

						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							try {
								Node __ATTR__loc = store.get( "loc" , Node.class );
								return carmaEquals( __MY__loc , __ATTR__loc );
							} catch (NullPointerException e) {
								return false;
							}
						}

					};

				}
			};

			_COMP_Block.addTransition(
				__STATE___Block_Consensus ,
				action ,
				null ,
				true);
		}

	}

	public CarmaComponent createComponentBlock(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "Block" );
		Integer __ATTR__data_value;
		Integer __MY__data_value;
		__ATTR__data_value =  0;
		__MY__data_value = __ATTR__data_value;
		c.set( "data_value" ,  __ATTR__data_value );
		Integer __ATTR__queuePosition;
		Integer __MY__queuePosition;
		__ATTR__queuePosition =  0;
		__MY__queuePosition = __ATTR__queuePosition;
		c.set( "queuePosition" ,  __ATTR__queuePosition );
		Node __ATTR__next;
		Node __MY__next;
		__ATTR__next =  null;
		__MY__next = __ATTR__next;
		c.set( "next" ,  __ATTR__next );
		Integer __ATTR__visitCount;
		Integer __MY__visitCount;
		__ATTR__visitCount =  0;
		__MY__visitCount = __ATTR__visitCount;
		c.set( "visitCount" ,  __ATTR__visitCount );
		Boolean __ATTR__appended;
		Boolean __MY__appended;
		__ATTR__appended =  false;
		__MY__appended = __ATTR__appended;
		c.set( "appended" ,  __ATTR__appended );
		Integer __ATTR__times_appended;
		Integer __MY__times_appended;
		__ATTR__times_appended =  0;
		__MY__times_appended = __ATTR__times_appended;
		c.set( "times_appended" ,  __ATTR__times_appended );
		Integer __ATTR__dataSize;
		Integer __MY__dataSize;
		__ATTR__dataSize =  0;
		__MY__dataSize = __ATTR__dataSize;
		c.set( "dataSize" ,  __ATTR__dataSize );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_Block , __STATE___Block_SaveBlock ));
		return c;
	}

	/* END COMPONENT: Block */


	/* START COMPONENT: Blockchain         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_Blockchain = new CarmaProcessAutomaton("Blockchain");

	public final CarmaProcessAutomaton.State __STATE___Blockchain_Append = _COMP_Blockchain.newState("Append");

	private void generateBlockchainBehaviour( ) {


		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__append , __ACT__append , true
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__block_data = (Integer) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Integer __ATTR__chainLength = (Integer) store.get( "chainLength" );
							Integer __ATTR__chainSize = (Integer) store.get( "chainSize" );
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "chainLength", ( __ATTR__chainLength )+( 1 ) );
							__ATTR__chainLength = ( __ATTR__chainLength )+( 1 );
							store.set( "chainSize", ( __ATTR__chainSize )+( __VARIABLE__block_data ) );
							__ATTR__chainSize = ( __ATTR__chainSize )+( __VARIABLE__block_data );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
							LinkedList<Object> message = (LinkedList<Object>) value;
							final int __VARIABLE__block_data = (Integer) message.get(0);
							final Node __MY__loc = myStore.get( "loc" , Node.class );
							return new CarmaPredicate() {

								//@Override
								public boolean satisfy(double now,CarmaStore store) {
									try {
										Node __ATTR__loc = store.get( "loc" , Node.class );
										return carmaEquals( __ATTR__loc , __MY__loc );
									} catch (NullPointerException e) {
										return false;
									}
								}

							};

				}

			};

			_COMP_Blockchain.addTransition(
				__STATE___Blockchain_Append ,
				action ,
				__STATE___Blockchain_Append );
		}

	}

	public CarmaComponent createComponentBlockchain(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "Blockchain" );
		Integer __ATTR__chainLength;
		Integer __MY__chainLength;
		__ATTR__chainLength =  0;
		__MY__chainLength = __ATTR__chainLength;
		c.set( "chainLength" ,  __ATTR__chainLength );
		Integer __ATTR__chainSize;
		Integer __MY__chainSize;
		__ATTR__chainSize =  0;
		__MY__chainSize = __ATTR__chainSize;
		c.set( "chainSize" ,  __ATTR__chainSize );
		Integer __ATTR__counter;
		Integer __MY__counter;
		__ATTR__counter =  1;
		__MY__counter = __ATTR__counter;
		c.set( "counter" ,  __ATTR__counter );
		Double __ATTR__blockTime;
		Double __MY__blockTime;
		__ATTR__blockTime =  15.0;
		__MY__blockTime = __ATTR__blockTime;
		c.set( "blockTime" ,  __ATTR__blockTime );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_Blockchain , __STATE___Blockchain_Append ));
		return c;
	}

	/* END COMPONENT: Blockchain */


	/* START COMPONENT: MemoryPool         */

	/* DEFINITIONS OF PROCESSES */
	public final CarmaProcessAutomaton _COMP_MemoryPool = new CarmaProcessAutomaton("MemoryPool");

	public final CarmaProcessAutomaton.State __STATE___MemoryPool_PutTRX = _COMP_MemoryPool.newState("PutTRX");
	public final CarmaProcessAutomaton.State __STATE___MemoryPool_FlushBlock = _COMP_MemoryPool.newState("FlushBlock");

	private void generateMemoryPoolBehaviour( ) {


		{
			CarmaAction action = new CarmaInput(
				__ACT_NAME__ready , __ACT__ready , true
			) {

				@Override
				protected CarmaStoreUpdate getUpdate(CarmaSystem sys, final Object value, final double now) {

					LinkedList<Object> message = (LinkedList<Object>) value;
					final int __VARIABLE__bytes = (Integer) message.get(0);
					return new CarmaStoreUpdate() {

						//@Override
						public void update(RandomGenerator r, CarmaStore store) {
							Integer __ATTR__poolSize = (Integer) store.get( "poolSize" );
							Integer __ATTR__StoredTRX = (Integer) store.get( "StoredTRX" );
							Node __MY__loc = store.get( "loc" , Node.class );
							Node __ATTR__loc = store.get( "loc" , Node.class );
							store.set( "poolSize", ( __ATTR__poolSize )+( __VARIABLE__bytes ) );
							__ATTR__poolSize = ( __ATTR__poolSize )+( __VARIABLE__bytes );
							store.set( "StoredTRX", ( __ATTR__StoredTRX )+( 1 ) );
							__ATTR__StoredTRX = ( __ATTR__StoredTRX )+( 1 );
						}
					};

				}

				@Override
				protected CarmaPredicate getPredicate(CarmaSystem sys, CarmaStore myStore, Object value) {
					return CarmaPredicate.TRUE;

				}

			};

			_COMP_MemoryPool.addTransition(
				__STATE___MemoryPool_PutTRX ,
				action ,
				__STATE___MemoryPool_PutTRX );
		}
		{
			CarmaPredicate _FOO_predicate0 = new CarmaPredicate() {

				//@Override
				public boolean satisfy(double now,CarmaStore store) {
					final Node __MY__loc = store.get( "loc" , Node.class );
					final Node __ATTR__loc = store.get( "loc" , Node.class );
					Double __ATTR__blockTime = (Double) store.get( "blockTime" );
					Integer __ATTR__counter = (Integer) store.get( "counter" );
					Double __ATTR__upperTime = (Double) store.get( "upperTime" );
					Integer __ATTR__poolSize = (Integer) store.get( "poolSize" );
					Integer __ATTR__block_size = (Integer) store.get( "block_size" );
					return ( ( ( ( __ATTR__blockTime )*( __ATTR__counter ) )<=( now ) )&&( ( __ATTR__upperTime )>=( now ) ) )&&( ( __ATTR__poolSize )>=( __ATTR__block_size ) );
				}

			};
			{
				CarmaAction action = new CarmaOutput(
					__ACT_NAME__produce , __ACT__produce , false
				) {

					@Override
					protected Object getValue(CarmaSystem sys, CarmaStore store, final double now) {
						LinkedList<Object> toReturn = new LinkedList<Object>();
						Integer __ATTR__block_size = (Integer) store.get( "block_size" );
						final Node __MY__loc = store.get( "loc" , Node.class );
						final Node __ATTR__loc = store.get( "loc" , Node.class );
						toReturn.add( __ATTR__block_size );
						return toReturn;
					}

					@Override
					protected CarmaStoreUpdate getUpdate(CarmaSystem sys,  final double now ) {
						return new CarmaStoreUpdate() {

							//@Override
							public void update(RandomGenerator r, CarmaStore store) {
								final Node __MY__loc = store.get( "loc" , Node.class );
								final Node __ATTR__loc = store.get( "loc" , Node.class );
								Integer __ATTR__counter = (Integer) store.get( "counter" );
								Integer __ATTR__poolSize = (Integer) store.get( "poolSize" );
								Integer __ATTR__block_size = (Integer) store.get( "block_size" );
								Integer __ATTR__blocksProduced = (Integer) store.get( "blocksProduced" );
								Double __ATTR__upperTime = (Double) store.get( "upperTime" );
								Double __ATTR__blockTime = (Double) store.get( "blockTime" );
								store.set( "counter", ( __ATTR__counter )+( 1 ) );
								__ATTR__counter = ( __ATTR__counter )+( 1 );
								store.set( "poolSize", ( __ATTR__poolSize )-( __ATTR__block_size ) );
								__ATTR__poolSize = ( __ATTR__poolSize )-( __ATTR__block_size );
								store.set( "blocksProduced", ( __ATTR__blocksProduced )+( 1 ) );
								__ATTR__blocksProduced = ( __ATTR__blocksProduced )+( 1 );
								store.set( "upperTime", ( __ATTR__upperTime )+( __ATTR__blockTime ) );
								__ATTR__upperTime = ( __ATTR__upperTime )+( __ATTR__blockTime );
							}
						};
					}

					@Override
					protected CarmaPredicate getPredicate(CarmaSystem sys, final CarmaStore myStore) {
						return CarmaPredicate.TRUE;

					}
				};

				_COMP_MemoryPool.addTransition(
					__STATE___MemoryPool_FlushBlock ,
					new CarmaPredicate.Conjunction(  _FOO_predicate0  ) ,
					action ,
					__STATE___MemoryPool_FlushBlock );
			}
		}

	}

	public CarmaComponent createComponentMemoryPool(
	) {
		CarmaComponent c = new CarmaComponent();
		c.setName( "MemoryPool" );
		Integer __ATTR__poolSize;
		Integer __MY__poolSize;
		__ATTR__poolSize =  0;
		__MY__poolSize = __ATTR__poolSize;
		c.set( "poolSize" ,  __ATTR__poolSize );
		Integer __ATTR__StoredTRX;
		Integer __MY__StoredTRX;
		__ATTR__StoredTRX =  0;
		__MY__StoredTRX = __ATTR__StoredTRX;
		c.set( "StoredTRX" ,  __ATTR__StoredTRX );
		Integer __ATTR__block_size;
		Integer __MY__block_size;
		__ATTR__block_size =  __CONST__block_size;
		__MY__block_size = __ATTR__block_size;
		c.set( "block_size" ,  __ATTR__block_size );
		Integer __ATTR__counter;
		Integer __MY__counter;
		__ATTR__counter =  1;
		__MY__counter = __ATTR__counter;
		c.set( "counter" ,  __ATTR__counter );
		Double __ATTR__blockTime;
		Double __MY__blockTime;
		__ATTR__blockTime =  10.0;
		__MY__blockTime = __ATTR__blockTime;
		c.set( "blockTime" ,  __ATTR__blockTime );
		Double __ATTR__upperTime;
		Double __MY__upperTime;
		__ATTR__upperTime =  ( 2 )*( __ATTR__blockTime );
		__MY__upperTime = __ATTR__upperTime;
		c.set( "upperTime" ,  __ATTR__upperTime );
		Integer __ATTR__blocksProduced;
		Integer __MY__blocksProduced;
		__ATTR__blocksProduced =  0;
		__MY__blocksProduced = __ATTR__blocksProduced;
		c.set( "blocksProduced" ,  __ATTR__blocksProduced );
		c.addAgent( new CarmaSequentialProcess( c , _COMP_MemoryPool , __STATE___MemoryPool_PutTRX ));
		c.addAgent( new CarmaSequentialProcess( c , _COMP_MemoryPool , __STATE___MemoryPool_FlushBlock ));
		return c;
	}

	/* END COMPONENT: MemoryPool */


	public static final int __ACT__arrive_CK = 0;
	public static final String __ACT_NAME__arrive_CK = "arrive_CK";
	public static final int __ACT__arrive_CH = 1;
	public static final String __ACT_NAME__arrive_CH = "arrive_CH";
	public static final int __ACT__timer = 2;
	public static final String __ACT_NAME__timer = "timer";
	public static final int __ACT__bell = 3;
	public static final String __ACT_NAME__bell = "bell";
	public static final int __ACT__arrive_bk = 4;
	public static final String __ACT_NAME__arrive_bk = "arrive_bk";
	public static final int __ACT__empty = 5;
	public static final String __ACT_NAME__empty = "empty";
	public static final int __ACT__arrive_Bh = 6;
	public static final String __ACT_NAME__arrive_Bh = "arrive_Bh";
	public static final int __ACT__storeTRX = 7;
	public static final String __ACT_NAME__storeTRX = "storeTRX";
	public static final int __ACT__assignQorder = 8;
	public static final String __ACT_NAME__assignQorder = "assignQorder";
	public static final int __ACT__validateTRX = 9;
	public static final String __ACT_NAME__validateTRX = "validateTRX";
	public static final int __ACT__ready = 10;
	public static final String __ACT_NAME__ready = "ready";
	public static final int __ACT__simplyMove = 11;
	public static final String __ACT_NAME__simplyMove = "simplyMove";
	public static final int __ACT__move = 12;
	public static final String __ACT_NAME__move = "move";
	public static final int __ACT__killTRX = 13;
	public static final String __ACT_NAME__killTRX = "killTRX";
	public static final int __ACT__flush = 14;
	public static final String __ACT_NAME__flush = "flush";
	public static final int __ACT__arriveBlock = 15;
	public static final String __ACT_NAME__arriveBlock = "arriveBlock";
	public static final int __ACT__storeBlock = 16;
	public static final String __ACT_NAME__storeBlock = "storeBlock";
	public static final int __ACT__assignToQ = 17;
	public static final String __ACT_NAME__assignToQ = "assignToQ";
	public static final int __ACT__validateBlock = 18;
	public static final String __ACT_NAME__validateBlock = "validateBlock";
	public static final int __ACT__prepare = 19;
	public static final String __ACT_NAME__prepare = "prepare";
	public static final int __ACT__produce = 20;
	public static final String __ACT_NAME__produce = "produce";
	public static final int __ACT__append = 21;
	public static final String __ACT_NAME__append = "append";


	public String[] getSystems() {
		return new String[] {
			"BlockchainSystemClusters"
		};
	}

	public SimulationFactory<CarmaSystem> getFactory( String name ) {
		if ("BlockchainSystemClusters".equals( name )) {
			return getFactorySystemBlockchainSystemClusters();
		}
		return null;
	}


	public class __SYSTEM__BlockchainSystemClusters extends CarmaSystem {

		public __SYSTEM__BlockchainSystemClusters( ) {
			super(  get_SPACE_Decentralised ( __CONST__nodenumber) );
			Integer __ATTR__TraversedTRX;
			Integer __GLOBAL__TraversedTRX;
			__ATTR__TraversedTRX =  0;
			__GLOBAL__TraversedTRX = __ATTR__TraversedTRX;
			setGLobalAttribute( "TraversedTRX" , __ATTR__TraversedTRX );
			Integer __ATTR__ArrivedBlocks;
			Integer __GLOBAL__ArrivedBlocks;
			__ATTR__ArrivedBlocks =  0;
			__GLOBAL__ArrivedBlocks = __ATTR__ArrivedBlocks;
			setGLobalAttribute( "ArrivedBlocks" , __ATTR__ArrivedBlocks );
			Integer __ATTR__TraversedBlocks;
			Integer __GLOBAL__TraversedBlocks;
			__ATTR__TraversedBlocks =  0;
			__GLOBAL__TraversedBlocks = __ATTR__TraversedBlocks;
			setGLobalAttribute( "TraversedBlocks" , __ATTR__TraversedBlocks );
			Integer __ATTR__AppendedBlocks;
			Integer __GLOBAL__AppendedBlocks;
			__ATTR__AppendedBlocks =  0;
			__GLOBAL__AppendedBlocks = __ATTR__AppendedBlocks;
			setGLobalAttribute( "AppendedBlocks" , __ATTR__AppendedBlocks );
			Integer __ATTR__SimplyMovedTRX;
			Integer __GLOBAL__SimplyMovedTRX;
			__ATTR__SimplyMovedTRX =  0;
			__GLOBAL__SimplyMovedTRX = __ATTR__SimplyMovedTRX;
			setGLobalAttribute( "SimplyMovedTRX" , __ATTR__SimplyMovedTRX );
			Integer __ATTR__SentToMP;
			Integer __GLOBAL__SentToMP;
			__ATTR__SentToMP =  0;
			__GLOBAL__SentToMP = __ATTR__SentToMP;
			setGLobalAttribute( "SentToMP" , __ATTR__SentToMP );
			Integer __ATTR__producedB;
			Integer __GLOBAL__producedB;
			__ATTR__producedB =  0;
			__GLOBAL__producedB = __ATTR__producedB;
			setGLobalAttribute( "producedB" , __ATTR__producedB );
			Integer __ATTR__arrivedTRX;
			Integer __GLOBAL__arrivedTRX;
			__ATTR__arrivedTRX =  0;
			__GLOBAL__arrivedTRX = __ATTR__arrivedTRX;
			setGLobalAttribute( "arrivedTRX" , __ATTR__arrivedTRX );
			Integer __ATTR__arrivedBursty;
			Integer __GLOBAL__arrivedBursty;
			__ATTR__arrivedBursty =  0;
			__GLOBAL__arrivedBursty = __ATTR__arrivedBursty;
			setGLobalAttribute( "arrivedBursty" , __ATTR__arrivedBursty );
			CarmaSystem system = this;
			CarmaSystem sys = this;
			{
					CarmaComponent fooComponent = createComponentNode(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(0) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentNode(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(1) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentNode(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(2) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentNode(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(3) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockchain(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(0) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockchain(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(1) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockchain(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(2) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockchain(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(3) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRoutePK(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(0) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRoutePK(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(1) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRoutePK(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(2) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRoutePK(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(3) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRouteSH(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(0) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRouteSH(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(1) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRouteSH(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(2) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRouteSH(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(3) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentNode(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(4) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentNode(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(5) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentNode(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(6) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentNode(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(7) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockchain(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(4) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockchain(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(5) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockchain(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(6) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockchain(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(7) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRoutePK(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(4) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRoutePK(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(5) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRoutePK(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(6) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRoutePK(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(7) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRouteSH(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(4) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRouteSH(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(5) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRouteSH(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(6) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentConstRouteSH(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(7) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockProducer(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(1)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockProducer(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(2)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockProducer(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(3)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockProducer(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(4)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockRouter(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(1)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockRouter(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(2)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockRouter(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(3)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentBlockRouter(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(4)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentMemoryPool(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(20)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
			{
					CarmaComponent fooComponent = createComponentTRX(
					);
					fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(10)) ));
					system.addComponent( fooComponent );
			}
		}

		@Override
		public double broadcastProbability( CarmaStore sender , CarmaStore receiver , int action ) {
			return 1.0;
		}

		@Override
		public double unicastProbability( CarmaStore sender , CarmaStore receiver , int action ) {
			return 1.0;
		}

		@Override
		public double broadcastRate(final CarmaStore sender, int action) {
			final CarmaSystem system = this;
			final CarmaSystem sys = this;
			final CarmaStore global = this.global;
			Node __SENDER__next = (Node) sender.get( "next" );
			Node __SENDER__loc = sender.get( "loc" , Node.class );
			if ((action==__ACT__storeTRX)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__assignQorder)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__ready)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__simplyMove)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__move)
				) {
					//
					return __FUN__traversalRate(
								__SENDER__loc,
								CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__SENDER__next) )
							);
					//
				}
			if ((action==__ACT__arrive_bk)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__arriveBlock)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__prepare)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__append)
				) {
					//
					return 100.0;
					//
				}
			return 1.0;

		}

		@Override
		public double unicastRate(final CarmaStore sender, int action) {
			final CarmaSystem system = this;
			final CarmaSystem sys = this;
			final CarmaStore global = this.global;
			Node __SENDER__loc = sender.get( "loc" , Node.class );
			if ((action==__ACT__validateTRX)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__produce)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__validateBlock)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__arrive_Bh)
				) {
					//
					return 1.0;
					//
				}
			if ((action==__ACT__arrive_CK)
				) {
					//
					return 10.0;
					//
				}
			if ((action==__ACT__arrive_CH)
				) {
					//
					return 10.0;
					//
				}
			return 1.0;

		}

		@Override
		public void broadcastUpdate(
			final RandomGenerator random ,
			final CarmaStore sender ,
			final int action ,
			final Object value ) {
			final CarmaSystem system = this;
			final CarmaSystem sys = this;
			final CarmaStore global = this.global;
			final CarmaStore store = this.global;
			Integer __ATTR__TraversedTRX = (Integer) global.get( "TraversedTRX" );
			Integer __ATTR__arrivedBursty = (Integer) global.get( "arrivedBursty" );
			Integer __ATTR__arrivedTRX = (Integer) global.get( "arrivedTRX" );
			Integer __ATTR__AppendedBlocks = (Integer) global.get( "AppendedBlocks" );
			Integer __ATTR__ArrivedBlocks = (Integer) global.get( "ArrivedBlocks" );
			Integer __ATTR__SimplyMovedTRX = (Integer) global.get( "SimplyMovedTRX" );
			Integer __ATTR__SentToMP = (Integer) global.get( "SentToMP" );
			Node __SENDER__loc = sender.get( "loc" , Node.class );
			if (action==__ACT__move) {
				store.set( "TraversedTRX", ( __ATTR__TraversedTRX )+( 1 ) );
				return ;
			}
			if (action==__ACT__arrive_bk) {
				store.set( "arrivedBursty", ( __ATTR__arrivedBursty )+( 1 ) );
				store.set( "arrivedTRX", ( __ATTR__arrivedTRX )+( 1 ) );
				return ;
			}
			if (action==__ACT__append) {
				store.set( "AppendedBlocks", ( __ATTR__AppendedBlocks )+( 1 ) );
				return ;
			}
			if (action==__ACT__arriveBlock) {
				store.set( "ArrivedBlocks", ( __ATTR__ArrivedBlocks )+( 1 ) );
				return ;
			}
			if (action==__ACT__simplyMove) {
				store.set( "SimplyMovedTRX", ( __ATTR__SimplyMovedTRX )+( 1 ) );
				return ;
			}
			if (action==__ACT__ready) {
				store.set( "SentToMP", ( __ATTR__SentToMP )+( 1 ) );
				return ;
			}
		}

		@Override
		public void unicastUpdate(
			final RandomGenerator random ,
			final CarmaStore sender ,
			final CarmaStore receiver,
			int action ,
			final Object value ) {
			final CarmaSystem system = this;
			final CarmaSystem sys = this;
			final CarmaStore global = this.global;
			final CarmaStore store = this.global;
			Integer __ATTR__arrivedTRX = (Integer) global.get( "arrivedTRX" );
			Integer __ATTR__producedB = (Integer) global.get( "producedB" );
			Node __SENDER__loc = sender.get( "loc" , Node.class );
			if (action==__ACT__arrive_Bh) {
				store.set( "arrivedTRX", ( __ATTR__arrivedTRX )+( 1 ) );
				return ;
			}
			if (action==__ACT__arrive_CH) {
				store.set( "arrivedTRX", ( __ATTR__arrivedTRX )+( 1 ) );
				return ;
			}
			if (action==__ACT__arrive_CK) {
				store.set( "arrivedTRX", ( __ATTR__arrivedTRX )+( 1 ) );
				return ;
			}
			if (action==__ACT__produce) {
				store.set( "producedB", ( __ATTR__producedB )+( 1 ) );
				{
						CarmaComponent fooComponent = createComponentBlock(
						);
						fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(50)) ));
						system.addComponent( fooComponent );
				}
				{
						CarmaComponent fooComponent = createComponentBlock(
						);
						fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(50)) ));
						system.addComponent( fooComponent );
				}
				{
						CarmaComponent fooComponent = createComponentBlock(
						);
						fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(50)) ));
						system.addComponent( fooComponent );
				}
				{
						CarmaComponent fooComponent = createComponentBlock(
						);
						fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(50)) ));
						system.addComponent( fooComponent );
				}
				{
						CarmaComponent fooComponent = createComponentBlock(
						);
						fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(50)) ));
						system.addComponent( fooComponent );
				}
				{
						CarmaComponent fooComponent = createComponentBlock(
						);
						fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(50)) ));
						system.addComponent( fooComponent );
				}
				{
						CarmaComponent fooComponent = createComponentBlock(
						);
						fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(50)) ));
						system.addComponent( fooComponent );
				}
				{
						CarmaComponent fooComponent = createComponentBlock(
						);
						fooComponent.setLocation(CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(-(50)) ));
						system.addComponent( fooComponent );
				}
				return ;
			}
		}
	}


	public SimulationFactory<CarmaSystem> getFactorySystemBlockchainSystemClusters() {
		return new SimulationFactory<CarmaSystem>() {

			//@Override
			public CarmaSystem getModel() {
				CarmaSystem sys = new __SYSTEM__BlockchainSystemClusters();
				CarmaSystem.setCurrentSpaceModel( sys.getSpaceModel() );
				return sys;
			}

			//@Override
			public Measure<CarmaSystem> getMeasure(String name) {
				// TODO Auto-generated method stub
				//FIXME!!!!
				return null;
			}

		};

	}


		public String[] getMeasures() {
			TreeSet<String> sortedSet = new TreeSet<String>( );
			sortedSet.add( "BlockQueueAtNode" );
			sortedSet.add( "inConsensus" );
			sortedSet.add( "StoredTRXNode" );
			sortedSet.add( "NodeCacheSize" );
			sortedSet.add( "TRXValidatedAt" );
			sortedSet.add( "TRXValidated" );
			sortedSet.add( "NodeMemReq" );
			sortedSet.add( "arrivedTRX" );
			sortedSet.add( "arrivedBursty" );
			sortedSet.add( "TraversedTRX" );
			sortedSet.add( "SentToMP" );
			sortedSet.add( "StoredInMemoryPool" );
			sortedSet.add( "MemPoolSize" );
			sortedSet.add( "blocksProduced" );
			sortedSet.add( "producedBlocks" );
			sortedSet.add( "producedB" );
			sortedSet.add( "BlocksStored" );
			sortedSet.add( "BlocksAtRouter" );
			sortedSet.add( "TraversedBlocks" );
			sortedSet.add( "ArrivedBlocks" );
			sortedSet.add( "ChainLength" );
			sortedSet.add( "AppendedBlocks" );
			sortedSet.add( "InterArrival1" );
			sortedSet.add( "InterArrival2" );
			sortedSet.add( "InterArrival3" );
			sortedSet.add( "InterArrival4" );
			sortedSet.add( "InterArrival5" );
			sortedSet.add( "InterArrival6" );
			sortedSet.add( "InterArrival7" );
			sortedSet.add( "InterArrival8" );
			sortedSet.add( "InterArrival9" );
			return sortedSet.toArray( new String[ sortedSet.size() ] );
		}

		public Measure<CarmaSystem> getMeasure( String name , Map<String,Object> parameters ) {
			if ("BlockQueueAtNode".equals( name ) ) {
				return getMeasureBlockQueueAtNode( parameters );
			}
			if ("inConsensus".equals( name ) ) {
				return getMeasureinConsensus( parameters );
			}
			if ("StoredTRXNode".equals( name ) ) {
				return getMeasureStoredTRXNode( parameters );
			}
			if ("NodeCacheSize".equals( name ) ) {
				return getMeasureNodeCacheSize( parameters );
			}
			if ("TRXValidatedAt".equals( name ) ) {
				return getMeasureTRXValidatedAt( parameters );
			}
			if ("TRXValidated".equals( name ) ) {
				return getMeasureTRXValidated( parameters );
			}
			if ("NodeMemReq".equals( name ) ) {
				return getMeasureNodeMemReq( parameters );
			}
			if ("arrivedTRX".equals( name ) ) {
				return getMeasurearrivedTRX( parameters );
			}
			if ("arrivedBursty".equals( name ) ) {
				return getMeasurearrivedBursty( parameters );
			}
			if ("TraversedTRX".equals( name ) ) {
				return getMeasureTraversedTRX( parameters );
			}
			if ("SentToMP".equals( name ) ) {
				return getMeasureSentToMP( parameters );
			}
			if ("StoredInMemoryPool".equals( name ) ) {
				return getMeasureStoredInMemoryPool( parameters );
			}
			if ("MemPoolSize".equals( name ) ) {
				return getMeasureMemPoolSize( parameters );
			}
			if ("blocksProduced".equals( name ) ) {
				return getMeasureblocksProduced( parameters );
			}
			if ("producedBlocks".equals( name ) ) {
				return getMeasureproducedBlocks( parameters );
			}
			if ("producedB".equals( name ) ) {
				return getMeasureproducedB( parameters );
			}
			if ("BlocksStored".equals( name ) ) {
				return getMeasureBlocksStored( parameters );
			}
			if ("BlocksAtRouter".equals( name ) ) {
				return getMeasureBlocksAtRouter( parameters );
			}
			if ("TraversedBlocks".equals( name ) ) {
				return getMeasureTraversedBlocks( parameters );
			}
			if ("ArrivedBlocks".equals( name ) ) {
				return getMeasureArrivedBlocks( parameters );
			}
			if ("ChainLength".equals( name ) ) {
				return getMeasureChainLength( parameters );
			}
			if ("AppendedBlocks".equals( name ) ) {
				return getMeasureAppendedBlocks( parameters );
			}
			if ("InterArrival1".equals( name ) ) {
				return getMeasureInterArrival1( parameters );
			}
			if ("InterArrival2".equals( name ) ) {
				return getMeasureInterArrival2( parameters );
			}
			if ("InterArrival3".equals( name ) ) {
				return getMeasureInterArrival3( parameters );
			}
			if ("InterArrival4".equals( name ) ) {
				return getMeasureInterArrival4( parameters );
			}
			if ("InterArrival5".equals( name ) ) {
				return getMeasureInterArrival5( parameters );
			}
			if ("InterArrival6".equals( name ) ) {
				return getMeasureInterArrival6( parameters );
			}
			if ("InterArrival7".equals( name ) ) {
				return getMeasureInterArrival7( parameters );
			}
			if ("InterArrival8".equals( name ) ) {
				return getMeasureInterArrival8( parameters );
			}
			if ("InterArrival9".equals( name ) ) {
				return getMeasureInterArrival9( parameters );
			}
			return null;
		}

		public String[] getMeasureParameters( String name ) {
			if ("BlockQueueAtNode".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("inConsensus".equals( name ) ) {
				return new String[] { };
			}
			if ("StoredTRXNode".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("NodeCacheSize".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("TRXValidatedAt".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("TRXValidated".equals( name ) ) {
				return new String[] { };
			}
			if ("NodeMemReq".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("arrivedTRX".equals( name ) ) {
				return new String[] { };
			}
			if ("arrivedBursty".equals( name ) ) {
				return new String[] { };
			}
			if ("TraversedTRX".equals( name ) ) {
				return new String[] { };
			}
			if ("SentToMP".equals( name ) ) {
				return new String[] { };
			}
			if ("StoredInMemoryPool".equals( name ) ) {
				return new String[] { };
			}
			if ("MemPoolSize".equals( name ) ) {
				return new String[] { };
			}
			if ("blocksProduced".equals( name ) ) {
				return new String[] { };
			}
			if ("producedBlocks".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("producedB".equals( name ) ) {
				return new String[] { };
			}
			if ("BlocksStored".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("BlocksAtRouter".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("TraversedBlocks".equals( name ) ) {
				return new String[] { };
			}
			if ("ArrivedBlocks".equals( name ) ) {
				return new String[] { };
			}
			if ("ChainLength".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("AppendedBlocks".equals( name ) ) {
				return new String[] { };
			}
			if ("InterArrival1".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("InterArrival2".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("InterArrival3".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("InterArrival4".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("InterArrival5".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("InterArrival6".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("InterArrival7".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("InterArrival8".equals( name ) ) {
				return new String[] { "i"};
			}
			if ("InterArrival9".equals( name ) ) {
				return new String[] { "i"};
			}
			return new String[] {};
		}

		public Map<String,Class<?>> getParametersType( String name ) {
			if ("BlockQueueAtNode".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("inConsensus".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("StoredTRXNode".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("NodeCacheSize".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("TRXValidatedAt".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("TRXValidated".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("NodeMemReq".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("arrivedTRX".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("arrivedBursty".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("TraversedTRX".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("SentToMP".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("StoredInMemoryPool".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("MemPoolSize".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("blocksProduced".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("producedBlocks".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("producedB".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("BlocksStored".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("BlocksAtRouter".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("TraversedBlocks".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("ArrivedBlocks".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("ChainLength".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("AppendedBlocks".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				return toReturn;
			}
			if ("InterArrival1".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("InterArrival2".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("InterArrival3".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("InterArrival4".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("InterArrival5".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("InterArrival6".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("InterArrival7".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("InterArrival8".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			if ("InterArrival9".equals( name ) ) {
				HashMap<String,Class<?>> toReturn = new HashMap<>();
				toReturn.put( "i" , Integer.class );
				return toReturn;
			}
			return new HashMap<>();
		}


		private double __MEASURE__BlockQueueAtNode( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__block_queue = (Integer) store.get( "block_queue" );
						return __MY__block_queue;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureBlockQueueAtNode(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__BlockQueueAtNode( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "BlockQueueAtNode"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__inConsensus( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = true;
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Block")&&csp.getState().getName().equals("Consensus");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureinConsensus(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__inConsensus( system );
				}

				//@Override
				public String getName() {
					return "inConsensus";
				}

			};

		}

		private double __MEASURE__StoredTRXNode( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__myTRX = (Integer) store.get( "myTRX" );
						return __MY__myTRX;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureStoredTRXNode(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__StoredTRXNode( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "StoredTRXNode"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__NodeCacheSize( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__cache = (Integer) store.get( "cache" );
						return __MY__cache;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureNodeCacheSize(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__NodeCacheSize( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "NodeCacheSize"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__TRXValidatedAt( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("TRX")&&csp.getState().getName().equals("Validate");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureTRXValidatedAt(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__TRXValidatedAt( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "TRXValidatedAt"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__TRXValidated( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = true;
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("TRX")&&csp.getState().getName().equals("Validate");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureTRXValidated(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__TRXValidated( system );
				}

				//@Override
				public String getName() {
					return "TRXValidated";
				}

			};

		}

		private double __MEASURE__NodeMemReq( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__total_mem = (Integer) store.get( "total_mem" );
						return __MY__total_mem;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureNodeMemReq(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__NodeMemReq( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "NodeMemReq"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__arrivedTRX( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			Integer __GLOBAL__arrivedTRX = (Integer) global.get( "arrivedTRX" );
			return system.max(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __GLOBAL__arrivedTRX = (Integer) global.get( "arrivedTRX" );
						return __GLOBAL__arrivedTRX;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = true;
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasurearrivedTRX(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__arrivedTRX( system );
				}

				//@Override
				public String getName() {
					return "arrivedTRX";
				}

			};

		}

		private double __MEASURE__arrivedBursty( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			Integer __GLOBAL__arrivedBursty = (Integer) global.get( "arrivedBursty" );
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __GLOBAL__arrivedBursty = (Integer) global.get( "arrivedBursty" );
						return __GLOBAL__arrivedBursty;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = true;
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasurearrivedBursty(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__arrivedBursty( system );
				}

				//@Override
				public String getName() {
					return "arrivedBursty";
				}

			};

		}

		private double __MEASURE__TraversedTRX( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			Integer __GLOBAL__TraversedTRX = (Integer) global.get( "TraversedTRX" );
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __GLOBAL__TraversedTRX = (Integer) global.get( "TraversedTRX" );
						return __GLOBAL__TraversedTRX;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				CarmaPredicate.TRUE
			)
			;
		}


		private Measure<CarmaSystem> getMeasureTraversedTRX(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__TraversedTRX( system );
				}

				//@Override
				public String getName() {
					return "TraversedTRX";
				}

			};

		}

		private double __MEASURE__SentToMP( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			Integer __GLOBAL__SentToMP = (Integer) global.get( "SentToMP" );
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __GLOBAL__SentToMP = (Integer) global.get( "SentToMP" );
						return __GLOBAL__SentToMP;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				CarmaPredicate.TRUE
			)
			;
		}


		private Measure<CarmaSystem> getMeasureSentToMP(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__SentToMP( system );
				}

				//@Override
				public String getName() {
					return "SentToMP";
				}

			};

		}

		private double __MEASURE__StoredInMemoryPool( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__StoredTRX = (Integer) store.get( "StoredTRX" );
						return __MY__StoredTRX;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = true;
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureStoredInMemoryPool(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__StoredInMemoryPool( system );
				}

				//@Override
				public String getName() {
					return "StoredInMemoryPool";
				}

			};

		}

		private double __MEASURE__MemPoolSize( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.max(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__poolSize = (Integer) store.get( "poolSize" );
						return __MY__poolSize;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = true;
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureMemPoolSize(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__MemPoolSize( system );
				}

				//@Override
				public String getName() {
					return "MemPoolSize";
				}

			};

		}

		private double __MEASURE__blocksProduced( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__blocksProduced = (Integer) store.get( "blocksProduced" );
						return __MY__blocksProduced;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = true;
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureblocksProduced(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__blocksProduced( system );
				}

				//@Override
				public String getName() {
					return "blocksProduced";
				}

			};

		}

		private double __MEASURE__producedBlocks( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__producedBlocks = (Integer) store.get( "producedBlocks" );
						return __MY__producedBlocks;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureproducedBlocks(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__producedBlocks( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "producedBlocks"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__producedB( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			Integer __GLOBAL__producedB = (Integer) global.get( "producedB" );
			return system.max(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __GLOBAL__producedB = (Integer) global.get( "producedB" );
						return __GLOBAL__producedB;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = true;
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureproducedB(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__producedB( system );
				}

				//@Override
				public String getName() {
					return "producedB";
				}

			};

		}

		private double __MEASURE__BlocksStored( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__blocks_saved = (Integer) store.get( "blocks_saved" );
						return __MY__blocks_saved;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureBlocksStored(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__BlocksStored( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "BlocksStored"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__BlocksAtRouter( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__Router_blocks = (Integer) store.get( "Router_blocks" );
						return __MY__Router_blocks;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureBlocksAtRouter(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__BlocksAtRouter( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "BlocksAtRouter"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__TraversedBlocks( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			Integer __GLOBAL__TraversedBlocks = (Integer) global.get( "TraversedBlocks" );
			return system.max(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __GLOBAL__TraversedBlocks = (Integer) global.get( "TraversedBlocks" );
						return __GLOBAL__TraversedBlocks;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				CarmaPredicate.TRUE
			)
			;
		}


		private Measure<CarmaSystem> getMeasureTraversedBlocks(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__TraversedBlocks( system );
				}

				//@Override
				public String getName() {
					return "TraversedBlocks";
				}

			};

		}

		private double __MEASURE__ArrivedBlocks( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			Integer __GLOBAL__ArrivedBlocks = (Integer) global.get( "ArrivedBlocks" );
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __GLOBAL__ArrivedBlocks = (Integer) global.get( "ArrivedBlocks" );
						return __GLOBAL__ArrivedBlocks;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				CarmaPredicate.TRUE
			)
			;
		}


		private Measure<CarmaSystem> getMeasureArrivedBlocks(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__ArrivedBlocks( system );
				}

				//@Override
				public String getName() {
					return "ArrivedBlocks";
				}

			};

		}

		private double __MEASURE__ChainLength( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __MY__chainLength = (Integer) store.get( "chainLength" );
						return __MY__chainLength;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) );
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureChainLength(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__ChainLength( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "ChainLength"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__AppendedBlocks( CarmaSystem system ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			Integer __GLOBAL__AppendedBlocks = (Integer) global.get( "AppendedBlocks" );
			return system.average(
				new Measure<CarmaStore>() {

					public double measure(CarmaStore store) {
						Integer __GLOBAL__AppendedBlocks = (Integer) global.get( "AppendedBlocks" );
						return __GLOBAL__AppendedBlocks;
					}

					public String getName() {
						return "ANONYMOUS MEASURE";
					}

				} ,
				new CarmaPredicate() {

					//Here we assume that the following "final" references are available (if needed):
					//- global: reference to the global store;
					//- sender: reference to the store of sender;
					//- receiver: reference to the store of the receiver;
					//@Override
					public boolean satisfy(double now,CarmaStore store) {
						Node __MY__loc = store.get( "loc" , Node.class );
						try{
							Boolean result = true;
							return (result==null?false:result);
						} catch (NullPointerException e) {
							return false;
						}
					}


				}
			)
			;
		}


		private Measure<CarmaSystem> getMeasureAppendedBlocks(
			Map<String,Object> parameters
		) {


			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__AppendedBlocks( system );
				}

				//@Override
				public String getName() {
					return "AppendedBlocks";
				}

			};

		}

		private double __MEASURE__InterArrival1( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( ( __MY__chainLength )>( 0 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival1(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival1( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival1"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__InterArrival2( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( ( __MY__chainLength )>( 1 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival2(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival2( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival2"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__InterArrival3( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( ( __MY__chainLength )>( 2 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival3(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival3( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival3"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__InterArrival4( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( carmaEquals( __MY__chainLength , 4 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival4(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival4( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival4"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__InterArrival5( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( carmaEquals( __MY__chainLength , 5 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival5(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival5( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival5"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__InterArrival6( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( carmaEquals( __MY__chainLength , 6 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival6(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival6( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival6"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__InterArrival7( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( carmaEquals( __MY__chainLength , 7 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival7(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival7( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival7"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__InterArrival8( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( carmaEquals( __MY__chainLength , 8 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival8(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival8( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival8"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}

		private double __MEASURE__InterArrival9( CarmaSystem system  , Integer __VARIABLE__i ) {
			final CarmaStore global = system.getGlobalStore();
			final double now = system.now();
			final CarmaSystem sys = system;
			return system.measure(
				new BasicComponentPredicate(
					new CarmaPredicate() {

						//Here we assume that the following "final" references are available (if needed):
						//- global: reference to the global store;
						//- sender: reference to the store of sender;
						//- receiver: reference to the store of the receiver;
						//@Override
						public boolean satisfy(double now,CarmaStore store) {
							Integer __MY__chainLength = (Integer) store.get( "chainLength" );
							Node __MY__loc = store.get( "loc" , Node.class );
							try{
								Boolean result = ( carmaEquals( __MY__chainLength , 9 ) )&&( carmaEquals( __MY__loc , CarmaSystem.getCurrentSpaceModel().getVertex( new Tuple(__VARIABLE__i) ) ) );
								return (result==null?false:result);
							} catch (NullPointerException e) {
								return false;
							}
						}


					}
					, new CarmaProcessPredicate() {

						//@Override
						public boolean eval(CarmaProcess p) {
							if (p instanceof CarmaSequentialProcess) {
								CarmaSequentialProcess csp = (CarmaSequentialProcess) p;
								try{
									return csp.getName().equals("Blockchain")&&csp.getState().getName().equals("Append");
								} catch (NullPointerException e) {
									return false;
								}
							}
							return false;
						}

					}
					)
			)
			;
		}


		private Measure<CarmaSystem> getMeasureInterArrival9(
			Map<String,Object> parameters
		) {

			final Integer __VARIABLE__i = (Integer) parameters.get("i");

			return new Measure<CarmaSystem>() {

				//@Override
				public double measure(final CarmaSystem system) {
					return __MEASURE__InterArrival9( system , __VARIABLE__i );
				}

				//@Override
				public String getName() {
					return "InterArrival9"+"["
							+"i="+__VARIABLE__i
						+"]";
				}

			};

		}



}
